(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0aed27"],{"0c64":function(e,n,o){"use strict";o.r(n),o.d(n,"code1",(function(){return r})),o.d(n,"code2",(function(){return t}));const r='\n// 使用方法1\nimport {CreatedTreeNode} from "../../utils/binary-tree";\n// 具有方法\n/**\n * 创建二叉树\n * @method insert 插入节点\n * @method romve 删除节点\n * @method find 查找节点\n * @method getMaxNode 获取最大节点\n * @method getMinNode 获取最小节点\n * @retrun treeNode\n * @description 优点 导入之后 编辑器有提示可以操作的函数提示 \n * @description 缺点 导入之后只能用它 不能多变量使用\n*/ \n// 使用\nCreatedTreeNode.insert(4);\nCreatedTreeNode.insert(3);\nCreatedTreeNode.insert(5);\nCreatedTreeNode.insert(6);\nCreatedTreeNode.insert(2);\nconsole.log("二叉树 ==>" ,CreatedTreeNode)\nconsole.log("最小值 ==>" , CreatedTreeNode.getMinNode());\nconsole.log("最大值 ==>" , CreatedTreeNode.getMaxNode());\nconsole.log("查询 ==>" , CreatedTreeNode.find(5));\nCreatedTreeNode.romve(5)\nconsole.log("删除 ==>" ,  CreatedTreeNode);\nconsole.log("最小值 ==>" , CreatedTreeNode.getMinNode());\n',t='\n// 使用方法2\nimport {CreatedTreeNodes} from "../../utils/binary-tree";\n// 具有方法\n/**\n * 创建多个二叉树列\n * @param {object} option 配置对象\n * @param {object} [option.TreeNode] 原始二叉树列\n * @param {Function} option.success 成功返回\n * @param {Function} [option.fail] 失败返回\n * @retrun success return  treeNode\n * @description 优点 导入之后 可以多处使用 还可以使用上一个的二叉树\n * @description 缺点 导入之后 没有智能提示\n*/ \n\n// 使用\nlet TreeNode = null;\nCreatedTreeNodes({\n    success : (res)=>{\n        TreeNode = res;\n        reeNode.insert(2);\n        console.log(TreeNode);\n    }\n})\n'}}]);
//# sourceMappingURL=chunk-2d0aed27.0f4b97fd.js.map