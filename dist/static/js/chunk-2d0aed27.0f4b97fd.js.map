{"version":3,"sources":["webpack:///./src/views/binary-tree/config.js"],"names":["code1","code2"],"mappings":"kHAAA,mFAOO,MAAMA,EAAS,syBA8BTC,EAAS","file":"static/js/chunk-2d0aed27.0f4b97fd.js","sourcesContent":["/*\r\n * @Author: zs.duan\r\n * @Date: 2023-01-14 14:50:36\r\n * @LastEditors: zs.duan\r\n * @LastEditTime: 2023-01-14 17:31:56\r\n * @FilePath: \\vue2+js+eui+template\\src\\views\\binary-tree\\config.js\r\n */\r\nexport const code1 = `\r\n// 使用方法1\r\nimport {CreatedTreeNode} from \"../../utils/binary-tree\";\r\n// 具有方法\r\n/**\r\n * 创建二叉树\r\n * @method insert 插入节点\r\n * @method romve 删除节点\r\n * @method find 查找节点\r\n * @method getMaxNode 获取最大节点\r\n * @method getMinNode 获取最小节点\r\n * @retrun treeNode\r\n * @description 优点 导入之后 编辑器有提示可以操作的函数提示 \r\n * @description 缺点 导入之后只能用它 不能多变量使用\r\n*/ \r\n// 使用\r\nCreatedTreeNode.insert(4);\r\nCreatedTreeNode.insert(3);\r\nCreatedTreeNode.insert(5);\r\nCreatedTreeNode.insert(6);\r\nCreatedTreeNode.insert(2);\r\nconsole.log(\"二叉树 ==>\" ,CreatedTreeNode)\r\nconsole.log(\"最小值 ==>\" , CreatedTreeNode.getMinNode());\r\nconsole.log(\"最大值 ==>\" , CreatedTreeNode.getMaxNode());\r\nconsole.log(\"查询 ==>\" , CreatedTreeNode.find(5));\r\nCreatedTreeNode.romve(5)\r\nconsole.log(\"删除 ==>\" ,  CreatedTreeNode);\r\nconsole.log(\"最小值 ==>\" , CreatedTreeNode.getMinNode());\r\n`\r\n\r\nexport const code2 = `\r\n// 使用方法2\r\nimport {CreatedTreeNodes} from \"../../utils/binary-tree\";\r\n// 具有方法\r\n/**\r\n * 创建多个二叉树列\r\n * @param {object} option 配置对象\r\n * @param {object} [option.TreeNode] 原始二叉树列\r\n * @param {Function} option.success 成功返回\r\n * @param {Function} [option.fail] 失败返回\r\n * @retrun success return  treeNode\r\n * @description 优点 导入之后 可以多处使用 还可以使用上一个的二叉树\r\n * @description 缺点 导入之后 没有智能提示\r\n*/ \r\n\r\n// 使用\r\nlet TreeNode = null;\r\nCreatedTreeNodes({\r\n    success : (res)=>{\r\n        TreeNode = res;\r\n        reeNode.insert(2);\r\n        console.log(TreeNode);\r\n    }\r\n})\r\n`"],"sourceRoot":""}