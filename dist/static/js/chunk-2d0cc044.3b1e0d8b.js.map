{"version":3,"sources":["webpack:///./src/views/myPromise/myPromise.vue?4c8c","webpack:///./src/utils/myPromise.js","webpack:///src/views/myPromise/myPromise.vue","webpack:///./src/views/myPromise/myPromise.vue?b4ef","webpack:///./src/views/myPromise/myPromise.vue"],"names":["render","_vm","this","_h","$createElement","_c","_self","newIndex","_e","attrs","_m","staticRenderFns","staticClass","_v","PENDING","RESOVLED","REJECTED","myPromise","constructor","executor","that","resolve","value","status","data","callbacks","length","setTimeout","forEach","element","onResolved","reject","reason","undefined","error","then","onRejected","Promise","push","result","catch","promises","values","resolvedCount","p","index","promise","time","props","type","default","mounted","console","component"],"mappings":"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","file":"static/js/chunk-2d0cc044.3b1e0d8b.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[(!_vm.newIndex)?_c('dzs-header',{attrs:{\"title\":\"二叉树\"}}):_vm._e(),_vm._m(0),(!_vm.newIndex)?_c('el-backtop',{attrs:{\"visibility-height\":20}}):_vm._e()],1)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"page\"},[_c('h2',[_vm._v(\"基础用法\")]),_c('div',{staticClass:\"item\"}),_c('h2',[_vm._v(\"源代码下载/查看\")]),_c('div',{staticClass:\"item\"},[_c('a',{attrs:{\"target\":\"_blank\",\"href\":\"https://github.com/zsduan/zsduan-summary/blob/master/src/utils/binary-tree.js\"}},[_vm._v(\"下载/查看地址\")])])])}]\n\nexport { render, staticRenderFns }","/*\r\n * @Author: zs.duan\r\n * @Date: 2023-01-15 09:45:55\r\n * @LastEditors: zs.duan\r\n * @LastEditTime: 2023-01-28 21:41:15\r\n * @FilePath: \\vue2+elui+template\\src\\utils\\myPromise.js\r\n */\r\n\r\nconst PENDING = 'pending';\r\nconst RESOVLED = 'resolved';\r\nconst REJECTED = 'rejected';\r\n\r\nclass myPromise {\r\n    constructor(executor) {\r\n        let that = this;\r\n        this.status = PENDING;   //状态未变之前都是pending\r\n        this.data = undefined;     //未定义的数据\r\n        this.callbacks = [];       //每个元素的结构：onResolved(){},onRejected(){}\r\n        //执行器函数，会立即执行\r\n        //两个改变promise状态的函数\r\n        function resolve(value) {\r\n            if (that.status !== PENDING) return\r\n            //调用resolve后，需要将状态改变成为resolved\r\n            that.status = RESOVLED;\r\n            //保存data数据\r\n            that.data = value;\r\n            //如果有未执行的callback，则立即异步执行onResolved,是包含两个回调的对象\r\n            if (that.callbacks.length > 0) {\r\n                setTimeout(() => {\r\n                    that.callbacks.forEach(element => {\r\n                        element.onResolved(value)\r\n                    });\r\n                });\r\n            }\r\n        }\r\n        function reject(reason) {\r\n            if (that.status !== PENDING) return\r\n            //调用reject后，需要将状态改变成为rejected\r\n            that.status = REJECTED;\r\n            //保存data数据\r\n            that.data = reason;\r\n            //如果有未执行的callback，则立即异步执行onRejected,是包含两个回调的对象\r\n            if (that.callbacks.length > 0) {\r\n                setTimeout(() => {\r\n                    that.callbacks.forEach(element => {\r\n                        element.onResolved(reason)\r\n                    });\r\n                });\r\n            }\r\n        }\r\n        //传入的参数为两个函数\r\n        //除了resolve和reject,还有可能自己抛出异常，会失败，此时需要一个try catch\r\n        try {\r\n            executor(resolve, reject)\r\n        } catch (error) {\r\n            reject(error);\r\n        }\r\n    }\r\n    /* \r\n//.then接收成功失败的回调\r\n返回新的Promise\r\n*/\r\n    then(onResolved, onRejected) {\r\n        const that = this;\r\n        // 指定回调函数的默认值(必须是函数)\r\n        onResolved = typeof onResolved === 'function' ? onResolved : value => value  //继续向下传递\r\n        onRejected = typeof onRejected === 'function' ? onRejected : reason => { throw reason }  //抛出异常\r\n        return new Promise((resolve, reject) => {\r\n            if (this.status === PENDING) {\r\n                //假设当前状态还是pending,将回调保存下来\r\n                this.callbacks.push({\r\n                    onResolved(value) {\r\n                        onResolved(that.data);\r\n                        try {\r\n                            const result = onResolved(that.data)\r\n                            if (result instanceof Promise) {\r\n                                result.then(resolve, reject\r\n                                    // value =>{\r\n                                    //     resolve(value)\r\n                                    // },\r\n                                    // reason=>{\r\n                                    //     reject(reason)\r\n                                    // }\r\n                                )\r\n                            }\r\n                        } catch (error) {\r\n                            resolve(error);\r\n                        }\r\n                    },\r\n                    onRejected(reason) {\r\n                        onRejected(that.data);\r\n                        try {\r\n                            const result = onRejected(that.data)\r\n                            if (result instanceof Promise) {\r\n                                result.then(resolve, reject\r\n                                    // value =>{\r\n                                    //     resolve(value)\r\n                                    // },\r\n                                    // reason=>{\r\n                                    //     reject(reason)\r\n                                    // }\r\n                                )\r\n                            }\r\n                        } catch (error) {\r\n                            reject(error);\r\n                        }\r\n                    }\r\n                })\r\n            } else if (this.status === RESOVLED) {\r\n                setTimeout(() => {\r\n                    //  如果回调是promise,return的promise结果就是这个promise结果\r\n                    try {\r\n                        const result = onResolved(that.data)\r\n                        if (result instanceof Promise) {\r\n                            result.then(resolve, reject\r\n                                // value =>{\r\n                                //     resolve(value)\r\n                                // },\r\n                                // reason=>{\r\n                                //     reject(reason)\r\n                                // }\r\n                            )\r\n                        } else {//返回的不是promise，返回promise为成功，value就是返回值\r\n                            resolve(result)\r\n                        }\r\n                    } catch (error) {\r\n                        reject(error);\r\n                    }\r\n                });\r\n            } else {\r\n                //如果前面的promise返回的是失败的回调\r\n                setTimeout(() => {\r\n                    //  如果回调是promise,return的promise结果就是这个promise结果\r\n                    try {\r\n                        const result = onRejected(that.data)\r\n                        if (result instanceof Promise) {\r\n                            result.then(resolve, reject\r\n                                // value =>{\r\n                                //     resolve(value)\r\n                                // },\r\n                                // reason=>{\r\n                                //     reject(reason)\r\n                                // }\r\n                            )\r\n                        }\r\n                    } catch (error) {\r\n                        try {\r\n                            const result = onResolved(that.data)\r\n                            if (result instanceof Promise) {\r\n                                result.then(resolve, reject\r\n                                    // value =>{\r\n                                    //     resolve(value)\r\n                                    // },\r\n                                    // reason=>{\r\n                                    //     reject(reason)\r\n                                    // }\r\n                                )\r\n                            }\r\n                        } catch (error) {\r\n                            reject(error);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        })\r\n    }\r\n    /*\r\n    接收失败的回调\r\n    返回新的promise\r\n     */\r\n    catch(onRejected) {\r\n        return this.then(undefined, onRejected)\r\n    }\r\n    /*\r\n    promise函数对象的resolve方法\r\n     */\r\n    static resolve(value) {\r\n        return new Promise((resolve, reject) => {\r\n            if (value instanceof Promise) {\r\n                value.then(resolve, reject)\r\n            } else {\r\n                resolve(value);\r\n            }\r\n        })\r\n    }\r\n    /*\r\n    promise函数对象的reject方法\r\n     */\r\n    static reject(reason) {\r\n        return new Promise((resolve, reject) => {\r\n            reject(reason)\r\n        })\r\n    }\r\n    //all接收数组\r\n    static all(promises) {\r\n        const values = [];\r\n        let resolvedCount = 0;\r\n        return new Promise((resolve, reject) => {\r\n            //遍历promise获取每个promise的结果\r\n            promises.forEach((p, index) => {\r\n                Promise.resolve(p).then(\r\n                    //成功的时候需要放入数组中\r\n                    value => {\r\n                        resolvedCount++;\r\n                        values[index] = value;\r\n                        if (resolvedCount == promises.length) {\r\n                            resolve(values);\r\n                        }\r\n                    },\r\n                    reason => {\r\n                        //只要一个失败了，return的promise就失败\r\n                        reject(reason)\r\n                    }\r\n                )\r\n            })\r\n        })\r\n    }\r\n    //race接收数组\r\n    static race(promise) {\r\n        //返回一个pomise\r\n        return new Promise((resolve, reject) => {\r\n            Promise.resolve(p).then(\r\n                //一旦有成功，return成功\r\n                value => {\r\n                    resolve(value);\r\n                },\r\n                //一旦有失败，return失败\r\n                reason => {\r\n                    reject(reason)\r\n                }\r\n            )\r\n        })\r\n    }\r\n\r\n    // promise的resolveDelay，rejectDelay\r\n    /* promise函数对象的resolveDelay方法\r\n    */\r\n    static resolveDelay(value, time) {\r\n        return new Promise((resolve, reject) => {\r\n            setTimeout(() => {\r\n                if (value instanceof Promise) {\r\n                    value.then(resolve, reject)\r\n                } else {\r\n                    resolve(value);\r\n                }\r\n            }, time);\r\n        })\r\n    }\r\n    /*\r\n    promise函数对象的rejectDelay方法\r\n    */\r\n    static rejectDelay(reason, time) {\r\n        return new Promise((resolve, reject) => {\r\n            setTimeout(() => {\r\n                reject(reason)\r\n            }, time);\r\n        })\r\n    }\r\n}\r\n\r\nexport default  myPromise","<!--\r\n * @Author: zs.duan\r\n * @Date: 2023-01-15 09:42:47\r\n * @LastEditors: zs.duan\r\n * @LastEditTime: 2023-01-15 10:11:46\r\n * @FilePath: \\vue2+js+eui+template\\src\\views\\myPromise\\myPromise.vue\r\n-->\r\n\r\n<template>\r\n    <div>\r\n        <dzs-header title=\"二叉树\" v-if=\"!newIndex\"></dzs-header>\r\n        <div class=\"page\">\r\n            <h2>基础用法</h2>\r\n            <div class=\"item\">\r\n                <!-- <dzs-code title=\"使用方法\" :value=\"code1\"></dzs-code> -->\r\n            </div>\r\n            <h2>源代码下载/查看</h2>\r\n            <div class=\"item\">\r\n                <a target=\"_blank\" href=\"https://github.com/zsduan/zsduan-summary/blob/master/src/utils/binary-tree.js\">下载/查看地址</a>\r\n            </div>\r\n        </div>\r\n        <el-backtop :visibility-height=\"20\" v-if=\"!newIndex\"></el-backtop>\r\n    </div>\r\n</template>\r\n<script>\r\nimport myPromise from \"../../utils/myPromise\"\r\n// import {code1 , code2} from \"./config\";\r\nexport default {\r\n    props:{\r\n        newIndex : {\r\n            type : Boolean,\r\n            default:()=>{\r\n                return false\r\n            }\r\n        }\r\n    },\r\n    data(){\r\n        return {\r\n            // code1 : code1,\r\n            // code2 : code2\r\n        }\r\n    },\r\n    mounted(){\r\n        let my = new myPromise((resolve , reject)=>{\r\n            console.log(\"我执行了吗\")\r\n            setTimeout(()=>{\r\n                resolve(4)\r\n            }, 5)\r\n        }).then(res =>{\r\n            console.log(res)\r\n        })\r\n\r\n        new Promise((resolve , reject)=>{\r\n            console.log(\"我执行了吗\")\r\n            setTimeout(()=>{\r\n                resolve(4)\r\n            }, 5)\r\n        }).then(res =>{\r\n            console.log(\"2 ==>\" , res)\r\n        })\r\n        // console.log(my)\r\n    }\r\n}\r\n</script>\r\n<style lang=\"less\" scoped>\r\n    \r\n</style>","import mod from \"-!../../../node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js??ref--13-0!../../../node_modules/_thread-loader@2.1.3@thread-loader/dist/cjs.js!../../../node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js!../../../node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/_vue-loader@15.10.1@vue-loader/lib/index.js??vue-loader-options!./myPromise.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js??ref--13-0!../../../node_modules/_thread-loader@2.1.3@thread-loader/dist/cjs.js!../../../node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js!../../../node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/_vue-loader@15.10.1@vue-loader/lib/index.js??vue-loader-options!./myPromise.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./myPromise.vue?vue&type=template&id=0d734012&scoped=true&\"\nimport script from \"./myPromise.vue?vue&type=script&lang=js&\"\nexport * from \"./myPromise.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/_vue-loader@15.10.1@vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"0d734012\",\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}