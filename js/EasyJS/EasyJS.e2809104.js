import{n as e,b as n}from"../../static/js/index-b7f06778.js";import"../_vue@2.6.11@vue/_vue@2.6.11@vue.c03078e3.js";import"../_async-validator@1.8.5@async-validator/_async-validator@1.8.5@async-validator.c09928d7.js";import"../_babel-runtime@6.26.0@babel-runtime/_babel-runtime@6.26.0@babel-runtime.1c250612.js";import"../_core-js@2.6.12@core-js/_core-js@2.6.12@core-js.13372523.js";import"../_vue-router@3.6.5@vue-router/_vue-router@3.6.5@vue-router.bd9f6ef4.js";import"../_vuex@3.6.2@vuex/_vuex@3.6.2@vuex.262a7d4a.js";import"../_element-ui@2.15.12@element-ui/_element-ui@2.15.12@element-ui.46584d3e.js";import"../_deepmerge@1.5.2@deepmerge/_deepmerge@1.5.2@deepmerge.f5e035f3.js";import"../_resize-observer-polyfill@1.5.1@resize-observer-polyfill/_resize-observer-polyfill@1.5.1@resize-observer-polyfill.40e1f28c.js";import"../_throttle-debounce@1.1.0@throttle-debounce/_throttle-debounce@1.1.0@throttle-debounce.0f7e23aa.js";import"../_lodash@4.17.21@lodash/_lodash@4.17.21@lodash.7ab6e3c5.js";import"../_babel-helper-vue-jsx-merge-props@2.0.3@babel-helper-vue-jsx-merge-props/_babel-helper-vue-jsx-merge-props@2.0.3@babel-helper-vue-jsx-merge-props.f41404db.js";import"../_normalize-wheel@1.0.1@normalize-wheel/_normalize-wheel@1.0.1@normalize-wheel.d6d32fc3.js";import"../_mavon-editor@2.10.4@mavon-editor/_mavon-editor@2.10.4@mavon-editor.d3fe48f0.js";import"../_vue-prism-editor@1.3.0@vue-prism-editor/_vue-prism-editor@1.3.0@vue-prism-editor.54f71847.js";import"../_prismjs@1.29.0@prismjs/_prismjs@1.29.0@prismjs.19c5fdf7.js";const r={props:{newIndex:{type:Boolean,default:()=>!1}},data:()=>({list:[{name:"深拷贝",code:"\n// 方法1\nconst newJson = JSON.parse(JSON.stringify(oldJson));\n// 方法2\nconst newJson = {...oldJson}\n"},{name:"在执行下一个操作之前等待指定的持续时间（以毫秒为单位）",code:"\nconst sleep = async (duration) => (\n    new Promise(resolve =>\n      setTimeout(resolve, duration)\n    )\n);\n\n// 使用\nawait sleep(1000);\n"},{name:"将多维数组拉平",code:"\nconst flatten = list => list.reduce((prev, next) => ([\n    ...prev,\n    ...(Array.isArray(next) ? flatten(next) : [next])\n]), []);\n\n// 使用\n\nflatten([[1, 2, [3, 4], 5, [6, [7, 8]]]]); // = [1, 2, 3, 4, 5, 6, 7, 8]\n"},{name:"升序",code:"\nconst ascending = (fn) => (a, b) => {\n    const valA = fn(a);\n    const valB = fn(b);\n    return valA < valB ? -1 : valA > valB ? 1 : 0;\n}\n\n// 使用\nconst byPrice = ascending(val => val.price);\n[{ price: 300 }, { price: 100 }, { price: 200 }].sort(byPrice); \n// = [{ price: 100 }, { price: 200 }, { price: 300 }]\n"},{name:"降序",code:"\nconst descending = (fn) => (a, b) => {\n    const valA = fn(b);\n    const valB = fn(a);\n    return valA < valB ? -1 : valA > valB ? 1 : 0;\n}\n\n// 使用\nconst byPrice = descending(val => val.price);\n[{ price: 300 }, { price: 100 }, { price: 200 }].sort(byPrice); \n// = [{ price: 300 }, { price: 200 }, { price: 100 }]\n"},{name:"反转字符串",code:"\nconst reverseString = string => [...string].reverse().join('');\n// 使用\nreverseString('Medium'); // 'muideM'\n"},{name:"是否为ie",code:'\n// 是否已为IE浏览器\n    IEVersion() {\n        let userAgent = navigator.userAgent; //取得浏览器的userAgent字符串\n        let isIE =\n            userAgent.indexOf("compatible") > -1 &&\n            userAgent.indexOf("MSIE") > -1; //判断是否IE<11浏览器\n        let isEdge = userAgent.indexOf("Edge") > -1 && !isIE; //判断是否IE的Edge浏览器\n        let isIE11 =\n            userAgent.indexOf("Trident") > -1 &&\n            userAgent.indexOf("rv:11.0") > -1;\n        if (isIE) {\n            let reIE = new RegExp("MSIE (\\d+\\.\\d+);");\n            reIE.test(userAgent);\n            let fIEVersion = parseFloat(RegExp["$1"]);\n            if (fIEVersion == 7) {\n                return 7;\n            } else if (fIEVersion == 8) {\n                return 8;\n            } else if (fIEVersion == 9) {\n                return 9;\n            } else if (fIEVersion == 10) {\n                return 10;\n            } else {\n                return 6; //IE版本<=7\n            }\n        } else if (isEdge) {\n            return "edge"; //edge\n        } else if (isIE11) {\n            return 11; //IE11\n        } else {\n            return -1; //不是ie浏览器\n        }\n    }\n'}],searchList:[],searchValue:""}),mounted(){},methods:{inputValue(){n({list:this.list,searValue:this.searchValue,key:"name",success:e=>{this.searchList=e}})}}},t={};var s=e(r,(function(){var e=this,n=e.$createElement,r=e._self._c||n;return r("div",[e.newIndex?e._e():r("dzs-header",{attrs:{title:"好用的js片段"}}),r("div",{staticClass:"search-box"},[r("div",{staticClass:"left"}),r("div",{staticClass:"right"},[r("el-input",{staticClass:"ipt",attrs:{placeholder:"请输入你需要搜索的名称",clearable:""},on:{input:e.inputValue},model:{value:e.searchValue,callback:function(n){e.searchValue=n},expression:"searchValue"}}),r("el-button",{staticClass:"btn",attrs:{type:"primary",icon:"el-icon-search"}},[e._v("搜索")])],1)]),e.searchList.length?r("div",{staticClass:"page"},e._l(e.searchList,(function(n,t){return r("div",{key:t,staticClass:"item"},[r("h2",[e._v(e._s(n.name))]),r("dzs-code",{attrs:{title:"代码片段",value:n.code}})],1)})),0):r("div",{staticClass:"page"},e._l(e.list,(function(n,t){return r("div",{key:t,staticClass:"item"},[r("h2",[e._v(e._s(n.name))]),r("dzs-code",{attrs:{title:"代码片段",value:n.code}})],1)})),0),e.newIndex?e._e():r("el-backtop",{attrs:{"visibility-height":20}})],1)}),[],!1,i,"b9b3d532",null,null);function i(e){for(let n in t)this[n]=t[n]}var a=function(){return s.exports}();export{a as default};
