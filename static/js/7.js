(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[7],{

/***/ "./node_modules/.store/webpack@4.47.0/node_modules/webpack/buildin/harmony-module.js":
/*!*******************************************!*\
  !*** (webpack)/buildin/harmony-module.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = function(originalModule) {\n\tif (!originalModule.webpackPolyfill) {\n\t\tvar module = Object.create(originalModule);\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"exports\", {\n\t\t\tenumerable: true\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n\n\n//# sourceURL=webpack:///(webpack)/buildin/harmony-module.js?");

/***/ }),

/***/ "./src/tool/format-time.js":
/*!*********************************!*\
  !*** ./src/tool/format-time.js ***!
  \*********************************/
/*! exports provided: formatTime, asyncFormatTime, chainFormatTime, setTime, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"formatTime\", function() { return formatTime; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"asyncFormatTime\", function() { return asyncFormatTime; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"chainFormatTime\", function() { return chainFormatTime; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setTime\", function() { return setTime; });\n/* harmony import */ var core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.error.cause.js */ \"./node_modules/.store/core-js@3.38.1/node_modules/core-js/modules/es.error.cause.js\");\n/* harmony import */ var core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_0__);\n\n/**\r\n * @name 格式化时间\r\n * @author zs.duan\r\n * @eamil zs.duan@qq.com\r\n * @version 2.0.0\r\n * @description 共有两个方法 formatTime 和 asyncFormatTime 其中 asyncFormatTime 返回一个Promise对象 \r\n * @description 可以使用 Vue.use(); 挂载到Vue原型上 $formatTime $asyncFormatTime\r\n * @description chainFormatTime 链式调用\r\n * */\n\n/**\r\n * 格式化时间 内部方法\r\n * @param {Date} date 日期对象\r\n * @param {String} format 格式化字符串\r\n * */\nconst _formatTime = function (date, format) {\n  let year = date.getFullYear();\n  let month = date.getMonth() + 1;\n  let day = date.getDate();\n  let hour = date.getHours();\n  let minute = date.getMinutes();\n  let second = date.getSeconds();\n  let millisecond = date.getMilliseconds();\n  let o = {\n    \"M+\": month,\n    \"d+\": day,\n    \"H+\": hour,\n    \"m+\": minute,\n    \"s+\": second,\n    \"S+\": millisecond\n  };\n  if (/(y+)/.test(format)) {\n    format = format.replace(RegExp.$1, (year + \"\").substr(4 - RegExp.$1.length));\n  }\n  for (var k in o) {\n    if (new RegExp(\"(\" + k + \")\").test(format)) {\n      format = format.replace(RegExp.$1, RegExp.$1.length == 1 ? o[k] : (\"00\" + o[k]).substr(String(o[k]).length));\n    }\n  }\n  return format;\n};\n\n/**\r\n * @name 格式化时间 \r\n * @description options 建议使用对象传参 也可以使用字符串 | 时间戳 | 日期对象\r\n * @description 所有参数不传时 默认为当前时间\r\n * @param {object | string | Date | number} [options] 配置对象 | 日期字符串 | 日期对象 | 时间戳\r\n * @param {string} options.format 格式化字符串 yyyy-MM-dd HH:mm:ss\r\n * @param {Date | string | number} [options.date] 日期对象 | 日期字符串 | 时间戳\r\n * @param {Function} [options.success] 成功返回\r\n * @param {Function} [options.fail] 失败返回\r\n * @param {Function} [options.complete] 完成返回\r\n * @returns {String} 格式化后的时间\r\n * */\nconst formatTime = function (options) {\n  if (!options) options = {};\n  if (typeof options === 'string' || typeof options === 'number' || Object.prototype.toString.call(options) === '[object Date]') {\n    options = {\n      date: options\n    };\n  }\n  if (typeof options !== 'object' && options) {\n    throw new Error('options must be an object or string or number or Date object');\n  }\n  if (typeof options.date == 'string') {\n    options.date = options.date.replace(/-/g, '/');\n    options.date = options.date.replace(/T/g, ' ');\n    options.date = options.date.substr(0, 19);\n  }\n  let option = {\n    format: \"yyyy-MM-dd HH:mm:ss\",\n    isInternal: false,\n    // 是否是内部调用\n    date: new Date(),\n    success: function (reslut) {},\n    fail: function (error) {},\n    complete: function (reslut) {}\n  };\n  options = Object.assign(option, options);\n  let date = options.date;\n  let format = options.format;\n  if (!format) format = \"yyyy-MM-dd HH:mm:ss\";\n  if (!date) date = new Date();\n  if (typeof format !== 'string') {\n    options.complete({\n      code: -1,\n      msg: \"format 必须是字符串\"\n    });\n    options.fail('format 必须是字符串');\n    if (options.isInternal) return {\n      code: -1,\n      data: 'format 必须是字符串'\n    };\n    throw new Error('format 必须是字符串');\n  }\n  try {\n    date = new Date(date);\n  } catch (error) {\n    options.complete({\n      code: -1,\n      msg: \"时间格式错误\"\n    });\n    options.fail('时间格式错误');\n    if (options.isInternal) return {\n      code: -1,\n      data: '时间格式错误'\n    };\n    throw new Error('时间格式错误');\n  }\n  let reslut = _formatTime(date, format);\n  options.complete({\n    code: 200,\n    msg: \"success\",\n    data: reslut\n  });\n  options.success(reslut);\n  if (options.isInternal) return {\n    code: 200,\n    data: reslut\n  };\n  return reslut;\n};\n\n/**\r\n * @name 格式化时间 \r\n * @description options 建议使用对象传参 也可以使用字符串 | 时间戳 | 日期对象\r\n * @description 所有参数不传时 默认为当前时间\r\n * @param {object | string | Date | number} [options] 配置对象 | 日期字符串 | 日期对象 | 时间戳\r\n * @param {String} options.format 格式化字符串 yyyy-MM-dd HH:mm:ss\r\n * @param {Date | string | number} [options.date] 日期对象 | 日期字符串 | 时间戳\r\n * @param {Function} [options.success] 成功返回\r\n * @param {Function} [options.fail] 失败返回\r\n * @param {Function} [options.complete] 完成返回\r\n * @returns {Promise} 返回一个Promise对象\r\n * */\nconst asyncFormatTime = function (options = {}) {\n  options.isInternal = true;\n  let data = formatTime(options);\n  return new Promise((resolve, reject) => {\n    if (data.code == -1) {\n      return reject(data.data);\n    }\n    resolve(data.data);\n  });\n};\n\n/**\r\n * 链式调用\r\n * @param {Date | string | number} [time] 日期对象 | 日期字符串 | 时间戳\r\n * @returns {Object} 返回一个对象\r\n * */\nfunction chainFormatTime(time) {\n  let returnTime = \"\";\n  if (!time) time = new Date();\n  if (typeof time == 'string') {\n    time = time.replace(/-/g, '/');\n    time = time.replace(/T/g, ' ');\n    time = time.substr(0, 19);\n  }\n  try {\n    time = new Date(time);\n  } catch (error) {\n    throw new Error('时间格式错误');\n  }\n  function format(formatStr) {\n    if (typeof formatStr !== 'string') throw new Error('format 必须是字符串');\n    returnTime = _formatTime(time, formatStr);\n    return this;\n  }\n  return {\n    format,\n    get time() {\n      return returnTime;\n    }\n  };\n}\n\n/**\r\n * @name 时间处理 只支持链式调用 \r\n * @description 所有参数不传时 默认为当前时间\r\n * @description format 格式化时间\r\n * @description diff 对比时间差\r\n * @description last 前n天(小时/周)后n天(小时/周)\r\n * @description week 获取指定日期是星期几 \r\n * @description day 指定日期是当前(年、月、周)的多少天\r\n * @description leapYear 今年是否是闰年\r\n * */\nclass Time {\n  /**\r\n   * 格式化时间\r\n   * @param {Object | string | number | Date | Function} [options] 配置参数/回调函数 可以是对象 字符串 时间戳 时间对象\r\n   * @param {string | number | Date} [options.date] 时间\r\n   * @param {string} [options.format] 格式化方式 yyyy-MM-dd HH:mm:ss\r\n   * @param {Function} [callback] 回调函数\r\n   * @returns {string} 格式化后的时间\r\n   * */\n  format(options, callback) {\n    if (typeof options == 'function') {\n      callback = options;\n      options = {};\n    }\n    if (!callback) callback = timeInfo => {};\n    return _format(options, callback);\n  }\n  /**\r\n   * 对比时间差\r\n   * @param {Object} options 配置参数\r\n   * @param {Date | string | number} options.startDate 开始时间\r\n   * @param {Date | string | number} [options.endDate] 结束时间 不传默认为当前时间\r\n   * @param {Function} [callback] 回调函数\r\n   * @returns {Object} 对比后的时间差\r\n   * @description 返回的数据格式 {allday : 0 , day : 0 , hours : 0 , allHours : 0 , minutes : 0 , allMinutes : 0 , seconds : 0 , allSeconds : 0 , timeDiff : 0}\r\n   * */\n  diff(options, callback) {\n    if (!callback) callback = timeInfo => {};\n    return _diff(options, callback);\n  }\n  /**\r\n   * 前n天(小时/周)后n天(小时/周) 前用负数 后用正数\r\n   * @param {Object | Function} [options] 配置参数/回调函数\r\n   * @param {Date | string | number} [options.date] 时间 默认为当前时间\r\n   * @param {number} [options.num] 需要前后多少天(小时/周) 默认1\r\n   * @param {string} [options.type] 类型 day hour week 默认 day\r\n   * @param {string} [options.format] 格式化方式 默认 yyyy-MM-dd\r\n   * @param {Function} [callback] 回调函数\r\n   * @returns {Object} 时间信息\r\n   * */\n  last(options, callback) {\n    if (!callback) callback = timeInfo => {};\n    if (typeof options == 'function') {\n      callback = options;\n      options = {};\n    }\n    return _last(options, callback);\n  }\n  /**\r\n   * 获取当前日期是星期几\r\n   * @param {Date | string | number | Function} [date] 时间/直接为回调函数 默认为当前时间 \r\n   * @param {Function} [callback] 回调函数\r\n   * @return {String} 返回星期几\r\n   * */\n  week(date, callback) {\n    if (typeof date == 'function') {\n      callback = date;\n      date = null;\n    }\n    if (!callback) callback = timeInfo => {};\n    return _week(date, callback);\n  }\n  /**\r\n   * 指定日期是当前(年、月、周)的多少天\r\n   * @param {Object | Function} [options] 配置参数/回调函数\r\n   * @param {Date | string | number} [options.date] 时间 默认为当前时间\r\n   * @param {string} [options.type] 类型 year month week 默认 year\r\n   * @param {Function} [callback] 回调函数\r\n   * @returns {Number} 返回指定日期是当前(年、月、周)的多少天\r\n   * */\n  day(options, callback) {\n    if (!callback) callback = timeInfo => {};\n    if (typeof options == 'function') {\n      callback = options;\n      options = {};\n    }\n    return _day(options, callback);\n  }\n  /**\r\n   * 是否为闰年\r\n   * @param {Date | string | number | Function} [date] 时间/直接为回调函数 默认为当前时间\r\n   * @param {Function} [callback] 回调函数\r\n   * @returns {Boolean} 返回是否为闰年\r\n   * */\n  leapYear(date, callback) {\n    if (!callback) callback = timeInfo => {};\n    if (typeof date == 'function') {\n      callback = date;\n      date = null;\n    }\n    return _leapYear(date, callback);\n  }\n}\n\n/**获取当前时间的年月日 时分秒 时间戳*/\nfunction _getNowDate(date, format = 'yyyy-MM-dd HH:mm:ss') {\n  if (!date) date = new Date();\n  let year = date.getFullYear();\n  let month = date.getMonth() + 1;\n  let day = date.getDate();\n  let hour = date.getHours();\n  let minutes = date.getMinutes();\n  let seconds = date.getSeconds();\n  let time = date.getTime();\n  date = formatTime({\n    format: format,\n    date: date\n  });\n  return {\n    year,\n    month,\n    day,\n    hour,\n    minutes,\n    seconds,\n    time,\n    date\n  };\n}\n\n/**格式化时间*/\nfunction _format(options, callback) {\n  let data = formatTime(options);\n  if (data.code == -1) return;\n  let date = options.date ? new Date(options.date) : new Date();\n  callback({\n    dateInfo: _getNowDate(date),\n    date: data\n  });\n  return data;\n}\n\n/**对比时间差*/\nfunction _diff(options, callback) {\n  if (typeof options !== 'object') throw new Error('options must be an object');\n  if (!options.startDate) throw new Error('startDate must be null');\n  if (!options.endDate) options.endDate = new Date();\n  if (options.startDate && typeof options.startDate == 'string') {\n    options.startDate = options.startDate.replace(/-/g, \"/\");\n    options.startDate = options.startDate.replace(/T/g, ' ');\n    options.startDate = options.startDate.substr(0, 19);\n  }\n  if (options.endDate && typeof options.endDate == 'string') {\n    options.endDate = options.endDate.replace(/-/g, \"/\");\n    options.endDate = options.endDate.replace(/T/g, ' ');\n    options.endDate = options.endDate.substr(0, 19);\n  }\n  try {\n    options.startDate = new Date(options.startDate);\n    options.endDate = new Date(options.endDate);\n  } catch (error) {\n    throw new Error('时间格式错误');\n  }\n  let timeDiff = options.startDate.getTime() - options.endDate.getTime();\n  let sendData = {\n    allday: 0,\n    //所有差天数\n    day: 0,\n    //天数\n    hours: 0,\n    //小时\n    allHours: 0,\n    //所有小时\n    minutes: 0,\n    //分钟\n    allMinutes: 0,\n    //所有分钟\n    seconds: 0,\n    //秒\n    allSeconds: 0,\n    //所有秒\n    timeDiff: timeDiff\n  };\n  sendData.allday = Number((timeDiff / (24 * 3600 * 1000)).toFixed(3));\n  sendData.day = Math.floor(timeDiff / (24 * 3600 * 1000));\n  sendData.hours = Math.floor(timeDiff % (24 * 3600 * 1000) / (3600 * 1000));\n  sendData.allHours = Number(Math.floor(timeDiff / (3600 * 1000)).toFixed(3));\n  sendData.minutes = Math.floor(timeDiff % (3600 * 1000) / (60 * 1000));\n  sendData.allMinutes = Number(Math.floor(timeDiff / (60 * 1000)).toFixed(3));\n  sendData.seconds = Math.floor(timeDiff % (60 * 1000) / 1000);\n  sendData.allSeconds = Number(Math.floor(timeDiff / 1000).toFixed(3));\n  callback(sendData);\n  return sendData;\n}\n\n/**前n天(小时/周)后n天(小时/周) 前用负数 后用正数*/\nfunction _last(options, callback) {\n  if (typeof options !== 'object') throw new Error('options must be an object');\n  if (!options.date) options.date = new Date();\n  if (!options.num) options.num = 1;\n  if (!options.type) options.type = 'day';\n  if (options.date && typeof options.date == 'string') {\n    options.date = options.date.replace(/-/g, \"/\");\n    options.date = options.date.replace(/T/g, ' ');\n    options.date = options.date.substr(0, 19);\n  }\n  try {\n    options.date = new Date(options.date);\n  } catch (error) {\n    throw new Error('时间格式错误');\n  }\n  let sendData = {\n    previousDate: \"\",\n    nextDate: \"\",\n    nowDate: \"\",\n    dateInfo: {}\n  };\n  let nextDate = null;\n  if (options.type == 'day') {\n    nextDate = new Date(options.date.setDate(options.date.getDate() + options.num));\n    if (!options.format) options.format = 'yyyy-MM-dd';\n    if (options.num < 0) {\n      sendData.previousDate = _formatTime(nextDate, options.format);\n    } else {\n      sendData.nextDate = _formatTime(nextDate, options.format);\n    }\n    sendData.nowDate = _formatTime(options.date, options.format);\n  }\n  if (options.type == 'hour') {\n    nextDate = new Date(options.date.setHours(options.date.getHours() + options.num));\n    if (!options.format) options.format = 'yyyy-MM-dd HH:mm';\n    if (options.num < 0) {\n      sendData.previousDate = _formatTime(nextDate, options.format);\n    } else {\n      sendData.nextDate = _formatTime(nextDate, options.format);\n    }\n    sendData.nowDate = _formatTime(options.date, options.format);\n  }\n  if (options.type == 'week') {\n    nextDate = new Date(options.date.setDate(options.date.getDate() + options.num * 7));\n    if (!options.format) options.format = 'yyyy-MM-dd';\n    if (options.num < 0) {\n      sendData.previousDate = _formatTime(nextDate, options.format);\n    } else {\n      sendData.nextDate = _formatTime(nextDate, options.format);\n    }\n    sendData.nowDate = _formatTime(options.date, options.format);\n  }\n  sendData.dateInfo = _getNowDate(sendData.date);\n  callback(sendData);\n  return sendData;\n}\n\n/**获取日期是星期几*/\nfunction _week(date, callback) {\n  const weekList = ['日', '一', '二', '三', '四', '五', '六'];\n  if (typeof date == 'function') {\n    callback = date;\n    date = null;\n  }\n  if (date && typeof date == 'string') {\n    date = date.replace(/-/g, \"/\");\n    date = date.replace(/T/g, ' ');\n    date = date.substr(0, 19);\n  }\n  if (!date) date = new Date();\n  try {\n    date = new Date(date);\n  } catch (error) {\n    throw new Error('时间格式错误');\n  }\n  let week = date.getDay();\n  let sendData = {\n    format: _formatTime(date, 'yyyy-MM-dd'),\n    date: date,\n    dateInfo: _getNowDate(date),\n    week: weekList[week]\n  };\n  callback(sendData);\n  return weekList[week];\n}\n\n/**\r\n * 指定日期是当前(年、月、周)的多少天\r\n * */\nfunction _day(options, callback) {\n  if (typeof options !== 'object') throw new Error('options must be an object');\n  if (!options.date) options.date = new Date();\n  if (!options.type) options.type = 'year';\n  if (options.date && typeof options.date == 'string') {\n    options.date = options.date.replace(/-/g, \"/\");\n    options.date = options.date.replace(/T/g, ' ');\n    options.date = options.date.substr(0, 19);\n  }\n  try {\n    options.date = new Date(options.date);\n  } catch (error) {\n    throw new Error('时间格式错误');\n  }\n  let sendData = {\n    format: _formatTime(options.date, 'yyyy-MM-dd'),\n    date: options.date,\n    dateInfo: _getNowDate(options.date),\n    num: 0\n  };\n  let start = null;\n  let diff = null;\n  let oneDay = 0;\n  switch (options.type) {\n    case 'year':\n      start = new Date(options.date.getFullYear(), 0, 0);\n      diff = options.date - start;\n      oneDay = 1000 * 60 * 60 * 24;\n      sendData.num = Math.floor(diff / oneDay);\n      break;\n    case 'month':\n      start = new Date(options.date.getFullYear(), options.date.getMonth(), 0);\n      diff = options.date - start;\n      oneDay = 1000 * 60 * 60 * 24;\n      sendData.num = Math.floor(diff / oneDay);\n      break;\n    case 'week':\n      const week = options.date.getDay();\n      sendData.num = week;\n      break;\n    default:\n      throw new Error('type is not defined');\n  }\n  callback(sendData);\n  return sendData.num;\n}\n\n/**\r\n * 指定日期是否为闰年\r\n * */\nfunction _leapYear(date, callback) {\n  if (!date) date = new Date();\n  if (typeof date == 'string') {\n    date = date.replace(/-/g, \"/\");\n    date = date.replace(/T/g, ' ');\n    date = date.substr(0, 4);\n    date = Number(date);\n  }\n  if (date.length == 4 || typeof date == 'number') {\n    date = date + '/01/01';\n  }\n  try {\n    date = new Date(date);\n  } catch (error) {\n    throw new Error('时间格式错误');\n  }\n  let year = date.getFullYear();\n  let sendData = {\n    format: _formatTime(date, 'yyyy-MM-dd'),\n    date: date,\n    dateInfo: _getNowDate(date),\n    leapYear: false\n  };\n  if (year % 4 == 0 && year % 100 != 0 || year % 400 == 0) {\n    sendData.leapYear = true;\n  }\n  callback(sendData);\n  return sendData.leapYear;\n}\n\n/**\r\n * @name 时间处理 只支持链式调用 \r\n * @description 所有参数不传时 默认为当前时间\r\n * @description format 格式化时间\r\n * @description diff 对比时间差\r\n * @description last 前一天后一天\r\n * @description week 获取指定日期是星期几 \r\n * @description day 指定日期是当前(年、月、周)的多少天\r\n * @description leapYear 今年是否是闰年\r\n * */\nconst setTime = new Time();\n\n/**\r\n * 挂载到Vue原型上\r\n * */\nconst install = function (Vue) {\n  Vue.prototype.$formatTime = formatTime;\n  Vue.prototype.$asyncFormatTime = asyncFormatTime;\n  Vue.prototype.$chainFormatTime = chainFormatTime;\n  Vue.prototype.$setTime = setTime;\n};\n\n/**\r\n * 支持CommonJs规范\r\n * */\nif ( true && module.exports) {\n  module.exports = {\n    formatTime,\n    asyncFormatTime,\n    chainFormatTime,\n    install,\n    setTime\n  };\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  formatTime,\n  asyncFormatTime,\n  chainFormatTime,\n  install,\n  setTime\n});\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/.store/webpack@4.47.0/node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/.store/webpack@4.47.0/node_modules/webpack/buildin/harmony-module.js\")(module)))\n\n//# sourceURL=webpack:///./src/tool/format-time.js?");

/***/ })

}]);