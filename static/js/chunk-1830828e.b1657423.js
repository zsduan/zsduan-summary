(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-1830828e","chunk-2d0c9aab"],{"33e5":function(e,t,n){"use strict";n.r(t);var r=function(){var e=this,t=e._self._c;return t("section",[t("public-item",{attrs:{title:"二叉树",code:e.code,isOpen:!0}})],1)},o=[];n("fdf1");function i(e,t){if(t.has(e))throw new TypeError("Cannot initialize the same private elements twice on an object")}function l(e,t){i(e,t),t.add(e)}function s(e,t,n){if("function"==typeof e?e===t:e.has(t))return arguments.length<3?t:n;throw new TypeError("Private element is not present on this object")}class a{constructor(e,t,n){this.data=e,this.left=t,this.right=n,this.count=1}}var d=new WeakSet;class h{constructor(e=null){l(this,d),this.root=e||null}romve(e){this.root=s(d,this,c).call(this,this.root,e)}insert(e){let t=new a(e,null,null);if(!this.root)return void(this.root=t);let n=this.root,r=null;while(1)if(r=n,t.data<n.data){if(n=n.left,!n){r.left=t;break}}else if(t.data>n.data){if(n=n.right,!n){r.right=t;break}}else if(t.data==n.data){n.count++;break}}find(e){let t=this.root;while(t){if(t.data==e)return t;t=t.data<e?t.right:t.left}return null}getMinNode(e=this.root){if(!e)return null;let t=e;while(t.left)t=t.left;return t}getMaxNode(e=this.root){if(!e)return null;let t=e;while(t.right)t=t.right;return t}}function c(e,t){if(!e)return null;if(t==e.data){if(!e.left&&!e.right)return null;if(!e.left)return e.right;if(!e.right)return e.left;let t=this.getMinNode(e.right);return e.data=t.data,e.right=s(d,this,c).call(this,e.right,t.data),e}return t<e.data?(e.left=s(d,this,c).call(this,e.left,t),e):(e.right=s(d,this,c).call(this,e.right,t),e)}var u=h,f=n("59b3"),g={data(){return{code:{title:"代码示例",code:f["code1"],lang:"js"}}},mounted(){this.initTree()},methods:{initTree(){const e=new u;e.insert(4),e.insert(3),e.insert(5),e.insert(6),e.insert(2),console.log("二叉树 ==>",e),console.log("最小值 ==>",e.getMinNode()),console.log("最大值 ==>",e.getMaxNode()),console.log("查询 ==>",e.find(5)),e.romve(5),console.log("删除 ==>",e),console.log("最小值 ==>",e.getMinNode())}}},N=g,w=n("1805"),T=Object(w["a"])(N,r,o,!1,null,null,null);t["default"]=T.exports},"59b3":function(e,t,n){"use strict";n.r(t),n.d(t,"code1",(function(){return r}));const r='\n/**\n * 创建二叉树\n * @method insert 插入节点\n * @method romve 删除节点\n * @method find 查找节点\n * @method getMaxNode 获取最大节点\n * @method getMinNode 获取最小节点\n*/ \nimport BSTree from "@/utils/binary-tree";\nconst CreatedTreeNode = new BSTree;\nCreatedTreeNode.insert(4);\nCreatedTreeNode.insert(3);\nCreatedTreeNode.insert(5);\nCreatedTreeNode.insert(6);\nCreatedTreeNode.insert(2);\nconsole.log("二叉树 ==>" ,CreatedTreeNode)\nconsole.log("最小值 ==>" , CreatedTreeNode.getMinNode());\nconsole.log("最大值 ==>" , CreatedTreeNode.getMaxNode());\nconsole.log("查询 ==>" , CreatedTreeNode.find(5));\nCreatedTreeNode.romve(5)\nconsole.log("删除 ==>" ,  CreatedTreeNode);\nconsole.log("最小值 ==>" , CreatedTreeNode.getMinNode());\n'}}]);
//# sourceMappingURL=chunk-1830828e.b1657423.js.map