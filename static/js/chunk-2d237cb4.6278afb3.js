(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d237cb4"],{fd44:function(n,e,r){"use strict";r.r(e),r.d(e,"code1",(function(){return t})),r.d(e,"code2",(function(){return o})),r.d(e,"code3",(function(){return c})),r.d(e,"code4",(function(){return i})),r.d(e,"code5",(function(){return a})),r.d(e,"code6",(function(){return s})),r.d(e,"code7",(function(){return u})),r.d(e,"code8",(function(){return l})),r.d(e,"code9",(function(){return d})),r.d(e,"code10",(function(){return p}));const t="\n/**深拷贝*/ \n// 方法1\nconst newJson = JSON.parse(JSON.stringify(oldJson));\n// 方法2\nconst newJson = {...oldJson}\n",o="\n/**\n * 延时函数\n * @param {Number} [time] 延时时间 默认500ms\n * @param {Function} [fn] 回调函数\n * */ \nconst sleep = (time = 500 , fn) => {\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            if (fn && typeof fn === 'function') {\n                resolve(fn())\n            }else{\n                resolve(true)\n            }\n        }, time)\n    })\n}\n\n// 使用\nawait sleep(1000);\n",c="\nconst flatten = list => list.reduce((prev, next) => ([\n    ...prev,\n    ...(Array.isArray(next) ? flatten(next) : [next])\n]), []);\n\n// 使用\n\nflatten([[1, 2, [3, 4], 5, [6, [7, 8]]]]); // = [1, 2, 3, 4, 5, 6, 7, 8]\n",i="\nconst ascending = (fn) => (a, b) => {\n    const valA = fn(a);\n    const valB = fn(b);\n    return valA < valB ? -1 : valA > valB ? 1 : 0;\n}\n\n// 使用\nconst byPrice = ascending(val => val.price);\n[{ price: 300 }, { price: 100 }, { price: 200 }].sort(byPrice); \n// = [{ price: 100 }, { price: 200 }, { price: 300 }]\n",a="\nconst descending = (fn) => (a, b) => {\n    const valA = fn(b);\n    const valB = fn(a);\n    return valA < valB ? -1 : valA > valB ? 1 : 0;\n}\n\n// 使用\nconst byPrice = descending(val => val.price);\n[{ price: 300 }, { price: 100 }, { price: 200 }].sort(byPrice); \n// = [{ price: 300 }, { price: 200 }, { price: 100 }]\n",s="\nconst reverseString = string => [...string].reverse().join('');\n// 使用\nreverseString('Medium'); // 'muideM'\n",u="\n/**\n * 将url参数转换为对象\n * @param {String} [url] url地址\n * */ \nparseQueryString(url) {\n    url = url == null ? window.location.href : url\n    const search = url.substring(url.lastIndexOf('?') + 1)\n    const obj = {}\n    const reg = /([^?&=]+)=([^?&=]*)/g\n    search.replace(reg, (rs, $1, $2) => {\n        const name = decodeURIComponent($1)\n        let val = decodeURIComponent($2)\n        val = String(val)\n        obj[name] = val\n        return rs\n    })\n    return obj\n}\n",l="\n/**\n * 将对象转换为url参数\n * @param {Object} obj 对象\n * */ \nparam(json) {\n    if (!json) return ''\n    return cleanArray(\n        Object.keys(json).map(key => {\n            if (json[key] === undefined) return ''\n            return encodeURIComponent(key) + '=' + encodeURIComponent(json[key])\n        })\n    ).join('&')\n}\n",d="\n/**\n * 深拷贝\n * @param {Object} source 对象\n * */ \nconst deepCopy = (obj) => {\n    if (typeof obj !== 'object' || obj === null) {\n        return obj;\n    }\n    let copy = Array.isArray(obj) ? [] : {};\n    for (let key in obj) {\n        if (obj.hasOwnProperty(key)) {\n            copy[key] = deepCopy(obj[key]);\n        }\n    }\n    return copy;\n}\n",p="\n/**\n * 生成随机数\n * @param {Number} min 最小值\n * @param {Number} max 最大值\n * */ \nfunction getRandom (min , max){\n    let reslut = Math.random()*(max - min) + min;\n    return reslut;\n}\n"}}]);
//# sourceMappingURL=chunk-2d237cb4.6278afb3.js.map