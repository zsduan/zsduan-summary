(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0e906f"],{"8c7e":function(n,o,r){"use strict";r.r(o),r.d(o,"code1",(function(){return t})),r.d(o,"code2",(function(){return e})),r.d(o,"code3",(function(){return a}));const t='\n/**\n * 分组/排序\n * @param {Object} option\n * @param {Array} option.list 需要处理的数据 必填\n * @param {String} [option.key] 需要处理的数据的key 排序/分组\n * @param {Function} [option.func] 处理函数 优先级高于key 仅在type为sort时有效\n * @param {String} [option.type] 处理类型 group/sort group分组 sort排序 默认sort\n * @param {String} [option.order] 排序方式 asc/desc 仅在type为sort时有效 默认asc\n * @param {Function} [option.success] 成功回调\n * @param {Function} [option.fail] 失败回调\n * @returns {Array} 处理后的数据\n * */ \n\nimport groupOrSort from "@/utils/group-sorting";\n\nlet list = [\n    {\n        age: 18,\n        name: "张三"\n    },\n    {\n        age: 18,\n        name: "李四"\n    },\n    {\n        age: 17,\n        name: "王五"\n    },\n    {\n        age: 17,\n        name: "王麻子"\n    },\n    {\n        age: 20,\n        name: "赵六"\n    },\n    {\n        age : 24 ,\n        name : "赵六器"\n    },\n    {\n        age: 20,\n        name: "赵六器"\n    }\n];\n\nthis.value1 = groupOrSort({\n    list,\n    key: "age",\n});\n',e='\nthis.value2 = groupOrSort({\n    list,\n    key: "age",\n    order: "desc"\n});\n',a='\nthis.value3 = groupOrSort({\n    list,\n    key: "name",\n    type : "group"\n});\n'}}]);
//# sourceMappingURL=chunk-2d0e906f.b709bdb6.js.map