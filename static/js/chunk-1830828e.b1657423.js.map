{"version":3,"sources":["webpack:///./src/views/idea/binary-tree/index.vue","webpack:///./node_modules/.store/@babel+runtime@7.24.8/node_modules/@babel/runtime/helpers/esm/checkPrivateRedeclaration.js","webpack:///./node_modules/.store/@babel+runtime@7.24.8/node_modules/@babel/runtime/helpers/esm/classPrivateMethodInitSpec.js","webpack:///./node_modules/.store/@babel+runtime@7.24.8/node_modules/@babel/runtime/helpers/esm/assertClassBrand.js","webpack:///./src/utils/binary-tree.js","webpack:///src/views/idea/binary-tree/index.vue","webpack:///./src/views/idea/binary-tree/index.vue?ed8a","webpack:///./src/views/idea/binary-tree/index.vue?f607","webpack:///./src/views/idea/binary-tree/config.js"],"names":["render","_vm","this","_c","_self","attrs","code","staticRenderFns","_checkPrivateRedeclaration","e","t","has","TypeError","_classPrivateMethodInitSpec","a","checkPrivateRedeclaration","add","_assertClassBrand","n","arguments","length","CreatedTree","constructor","data","left","right","count","_BSTree_brand","WeakSet","BSTree","TreeNode","root","romve","_romoveNode","call","insert","newNode","currNode","parentNode","find","getMinNode","node","getMaxNode","temNode","title","code1","lang","mounted","initTree","methods","CreatedTreeNode","console","log","component"],"mappings":"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","file":"static/js/chunk-1830828e.b1657423.js","sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('section',[_c('public-item',{attrs:{\"title\":\"二叉树\",\"code\":_vm.code,\"isOpen\":true}})],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","function _checkPrivateRedeclaration(e, t) {\n  if (t.has(e)) throw new TypeError(\"Cannot initialize the same private elements twice on an object\");\n}\nexport { _checkPrivateRedeclaration as default };","import checkPrivateRedeclaration from \"./checkPrivateRedeclaration.js\";\nfunction _classPrivateMethodInitSpec(e, a) {\n  checkPrivateRedeclaration(e, a), a.add(e);\n}\nexport { _classPrivateMethodInitSpec as default };","function _assertClassBrand(e, t, n) {\n  if (\"function\" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n;\n  throw new TypeError(\"Private element is not present on this object\");\n}\nexport { _assertClassBrand as default };","/**二叉树原理 左边一定比底数小（一层比一层小） 右边一定比底数大 （一层比一层大）*/ \r\n/**创建 二叉树*/ \r\nclass CreatedTree{\r\n    constructor(data , left , right){\r\n        this.data = data;\r\n        this.left = left;\r\n        this.right = right;\r\n        this.count = 1;\r\n    }\r\n}\r\n\r\n/**\r\n * 操作二叉树\r\n * @method insert 插入节点\r\n * @method romve 删除节点\r\n * @method find 查找节点\r\n * @method getMaxNode 获取最大节点\r\n * @method getMinNode 获取最小节点\r\n * \r\n*/ \r\nclass BSTree{\r\n    constructor(TreeNode = null){\r\n        /**\r\n         * 二叉树列\r\n         * */ \r\n        this.root = TreeNode || null;\r\n    }\r\n\r\n    // 删除一个节点\r\n    #_romoveNode(node , data){\r\n        if(!node){\r\n            return null\r\n        }\r\n        if(data == node.data){\r\n            // 如果都为空 直接返回null\r\n            if(!node.left && !node.right){\r\n                return null\r\n            }\r\n            // 如果左边为空 返回右边\r\n            if(!node.left) return node.right;\r\n            // 如果右边为空 返回左边\r\n            if(!node.right) return node.left;\r\n            // 有两个节点的节点 \r\n            /*  \r\n             做法：\r\n                找到待删除节点的右子树上的最小值创建一个临时节点。 因为根节点就是最小的\r\n                将临时节点上的值复制到待删除节点，然后再删除临时节点\r\n            */\r\n \r\n            // 寻找右子树上的最小值\r\n            let temNode = this.getMinNode(node.right);\r\n            node.data = temNode.data;\r\n            node.right = this.#_romoveNode(node.right , temNode.data);\r\n            return node;\r\n        }else if (data < node.data){\r\n            node.left = this.#_romoveNode(node.left , data);\r\n            return node;\r\n        }else{\r\n            node.right = this.#_romoveNode(node.right , data);\r\n            return node;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 删除指定节点数据\r\n     * @param {string} data 需要删除的数据\r\n     * */ \r\n    romve(data){\r\n        this.root = this.#_romoveNode(this.root , data)\r\n    }\r\n\r\n    /**\r\n     * 插入节点\r\n     * @param {string} data 需要插入的数据\r\n     * */ \r\n    insert(data){\r\n        let newNode = new CreatedTree(data , null , null)\r\n        if(!this.root){\r\n            this.root = newNode;\r\n            return ;\r\n        }\r\n        let currNode = this.root;\r\n        let parentNode = null;\r\n        while(true){\r\n            parentNode = currNode;\r\n            if(newNode.data < currNode.data){\r\n                // 更新当前指点的指向\r\n                currNode = currNode.left;\r\n                // 当前节点为空时，说明找到了正确的插入位置\r\n                if(!currNode){\r\n                    parentNode.left = newNode;\r\n                    break;\r\n                }\r\n            }else if(newNode.data > currNode.data){\r\n                // 更新当前指点的指向\r\n                currNode = currNode.right;\r\n                // 当前节点为空时，说明找到了正确的插入位置\r\n                if(!currNode){\r\n                    parentNode.right = newNode;\r\n                    break;\r\n                }\r\n            }else if(newNode.data == currNode.data){\r\n                // 如果给定的数据再次出现，就更新计数值\r\n                currNode.count ++;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 查找节点\r\n     * @param {string} data 需要查找的数据\r\n     * @return findNode\r\n     */\r\n    find(data){\r\n        let currNode = this.root;\r\n        while(currNode){\r\n            if(currNode.data == data){\r\n                return currNode\r\n            }else if(currNode.data < data){\r\n                currNode = currNode.right;\r\n            }else{\r\n                currNode = currNode.left;\r\n            }\r\n        }\r\n        return null\r\n    }\r\n\r\n    /**\r\n     * 获取最小值节点\r\n     * @return minNode\r\n     * */ \r\n    getMinNode(node = this.root){\r\n        if(!node)return null;\r\n        let currNode = node;\r\n        while(currNode.left){\r\n            currNode = currNode.left;\r\n        }\r\n        return currNode;\r\n    }\r\n\r\n    /**\r\n     * 获取最大值节点\r\n     * @return maxNode\r\n     */\r\n    getMaxNode(node = this.root){\r\n        if(!node)return null;\r\n        let currNode = node;\r\n        while(currNode.right){\r\n            currNode = currNode.right;\r\n        }\r\n        return currNode;\r\n    }\r\n}\r\n\r\n/**\r\n * 创建二叉树\r\n * @method insert 插入节点\r\n * @method romve 删除节点\r\n * @method find 查找节点\r\n * @method getMaxNode 获取最大节点\r\n * @method getMinNode 获取最小节点\r\n*/ \r\nexport default BSTree;","<template>\r\n    <section>\r\n        <public-item title=\"二叉树\" :code=\"code\" :isOpen=\"true\"></public-item>\r\n    </section>\r\n</template>\r\n<script>\r\nimport BSTree from \"@/utils/binary-tree.js\";\r\nimport { code1 } from \"./config.js\";\r\nexport default {\r\n    data() {\r\n        return {\r\n            code: {\r\n                title: \"代码示例\",\r\n                code: code1,\r\n                lang: \"js\"\r\n            },\r\n        }\r\n    },\r\n    mounted() {\r\n        this.initTree()\r\n    },\r\n    methods: {\r\n        initTree() {\r\n            const CreatedTreeNode = new BSTree\r\n            CreatedTreeNode.insert(4);\r\n            CreatedTreeNode.insert(3);\r\n            CreatedTreeNode.insert(5);\r\n            CreatedTreeNode.insert(6);\r\n            CreatedTreeNode.insert(2);\r\n            console.log(\"二叉树 ==>\", CreatedTreeNode)\r\n            console.log(\"最小值 ==>\", CreatedTreeNode.getMinNode());\r\n            console.log(\"最大值 ==>\", CreatedTreeNode.getMaxNode());\r\n            console.log(\"查询 ==>\", CreatedTreeNode.find(5));\r\n            CreatedTreeNode.romve(5)\r\n            console.log(\"删除 ==>\", CreatedTreeNode);\r\n            console.log(\"最小值 ==>\", CreatedTreeNode.getMinNode());\r\n        }\r\n    },\r\n}\r\n</script>","import mod from \"-!../../../../node_modules/.store/cache-loader@4.1.0/node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../../node_modules/.store/thread-loader@2.1.3/node_modules/thread-loader/dist/cjs.js!../../../../node_modules/.store/babel-loader@8.3.0/node_modules/babel-loader/lib/index.js!../../../../node_modules/.store/cache-loader@4.1.0/node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../../node_modules/.store/vue-loader@15.11.1/node_modules/vue-loader/lib/index.js??vue-loader-options!./index.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../../node_modules/.store/cache-loader@4.1.0/node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../../node_modules/.store/thread-loader@2.1.3/node_modules/thread-loader/dist/cjs.js!../../../../node_modules/.store/babel-loader@8.3.0/node_modules/babel-loader/lib/index.js!../../../../node_modules/.store/cache-loader@4.1.0/node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../../node_modules/.store/vue-loader@15.11.1/node_modules/vue-loader/lib/index.js??vue-loader-options!./index.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./index.vue?vue&type=template&id=13f9705a\"\nimport script from \"./index.vue?vue&type=script&lang=js\"\nexport * from \"./index.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../node_modules/.store/vue-loader@15.11.1/node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","/*\r\n * @Author: zs.duan\r\n * @Date: 2023-01-14 14:50:36\r\n * @LastEditors: zs.duan\r\n * @LastEditTime: 2023-01-14 17:31:56\r\n * @FilePath: \\vue2+js+eui+template\\src\\views\\binary-tree\\config.js\r\n */\r\nexport const code1 = `\r\n/**\r\n * 创建二叉树\r\n * @method insert 插入节点\r\n * @method romve 删除节点\r\n * @method find 查找节点\r\n * @method getMaxNode 获取最大节点\r\n * @method getMinNode 获取最小节点\r\n*/ \r\nimport BSTree from \"@/utils/binary-tree\";\r\nconst CreatedTreeNode = new BSTree;\r\nCreatedTreeNode.insert(4);\r\nCreatedTreeNode.insert(3);\r\nCreatedTreeNode.insert(5);\r\nCreatedTreeNode.insert(6);\r\nCreatedTreeNode.insert(2);\r\nconsole.log(\"二叉树 ==>\" ,CreatedTreeNode)\r\nconsole.log(\"最小值 ==>\" , CreatedTreeNode.getMinNode());\r\nconsole.log(\"最大值 ==>\" , CreatedTreeNode.getMaxNode());\r\nconsole.log(\"查询 ==>\" , CreatedTreeNode.find(5));\r\nCreatedTreeNode.romve(5)\r\nconsole.log(\"删除 ==>\" ,  CreatedTreeNode);\r\nconsole.log(\"最小值 ==>\" , CreatedTreeNode.getMinNode());\r\n`"],"sourceRoot":""}