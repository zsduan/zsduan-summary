(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0c51d8"],{"3e5e":function(n,t,e){"use strict";e.r(t),e.d(t,"code1",(function(){return o})),e.d(t,"code2",(function(){return s})),e.d(t,"code3",(function(){return a})),e.d(t,"code4",(function(){return r}));const o="\n/**\n * 获取格式化时间\n * @param {Object} option 配置对象\n * @param {String} option.Format 格式化字符串 yyyy-MM-dd HH:mm:ss\n * @param {Date | string} [option.date] 日期对象\n * @param {Function} [option.success] 成功返回\n * @param {Function} [option.fail] 失败返回\n * @returns {String} 格式化后的时间\n * @example\n * getTime({\n * Format : 'yyyy-MM-dd HH:mm:ss',\n * date : new Date(),\n * success : (reslut)=>{},\n * }) // 2021-04-05 15:54:28\n * */\n\nsetTime({\n    date : Time,\n    success : (res)=>{\n        this.time = res\n    }\n})\n",s="\n/**\n * 获取格式化时间\n * @param {Object} option 配置对象\n * @param {String} option.Format 格式化字符串 yyyy-MM-dd HH:mm:ss\n * @param {Date | string} [option.date] 日期对象\n * @param {Function} [option.success] 成功返回\n * @param {Function} [option.fail] 失败返回\n * @returns {String} 格式化后的时间\n * @example\n * getTime({\n * Format : 'yyyy-MM-dd HH:mm:ss',\n * date : new Date(),\n * success : (reslut)=>{},\n * }) // 2021-04-05 15:54:28\n * */\n\nsetTime({\n    date : e.Time,\n    Format : \"yyyy-MM-dd\",\n    success : (res)=>{\n        this.time1 = res\n    }\n})\n",a='\n/**\n * @name 格式化时间 \n * @description options 建议使用对象传参 也可以使用字符串 | 时间戳 | 日期对象\n * @description 所有参数不传时 默认为当前时间\n * @param {Object | string | Date | number} [options] 配置对象 | 日期字符串 | 日期对象 | 时间戳\n * @param {String} options.format 格式化字符串 yyyy-MM-dd HH:mm:ss\n * @param {Date | string | number} [options.date] 日期对象 | 日期字符串 | 时间戳\n * @param {Function} [options.success] 成功返回\n * @param {Function} [options.fail] 失败返回\n * @param {Function} [options.complete] 完成返回\n * @returns {String} 格式化后的时间\n * @returns {Promise} 返回一个Promise对象\n * */\n\nimport formatTime from "../../utils/format-time";\n\nformatTime({\n    date : new Date(),\n    format : "yyyy-MM-dd HH:mm:ss",\n    success : (res)=>{\n        this.time2 = res\n    },\n    fail : (err)=>{\n        console.log(err)\n    },\n    complete : (reslut)=>{\n        console.log("成功" , {code : 200 , msg : "成功" , date : "xxx"})\n        console.log("失败" , {code : -1 , msg : "xxx"})\n    }\n})\n\n',r='\n/**\n * @name 格式化时间 \n * @description options 建议使用对象传参 也可以使用字符串 | 时间戳 | 日期对象\n * @description 所有参数不传时 默认为当前时间\n * @param {Object | string | Date | number} [options] 配置对象 | 日期字符串 | 日期对象 | 时间戳\n * @param {String} options.format 格式化字符串 yyyy-MM-dd HH:mm:ss\n * @param {Date | string | number} [options.date] 日期对象 | 日期字符串 | 时间戳\n * @param {Function} [options.success] 成功返回\n * @param {Function} [options.fail] 失败返回\n * @param {Function} [options.complete] 完成返回\n * @returns {String} 格式化后的时间\n * @returns {Promise} 返回一个Promise对象\n * */\n\nimport formatTime from "../../utils/format-time";\n\nformatTime({\n    date : new Date(),\n    format : "yyyy-MM-dd HH:mm:ss",\n}).then((res)=>{\n    this.time3 = res\n}).catch((err)=>{\n    console.log(err)\n})\n\n// 也可以全部都是空 使用 async await\nasync time = await formatTime()\n\n// 也可以直接传一个时间参数 使用 async await\nasync time = await formatTime(new Date())\n\n// 也可以直接传format参数直接格式化当前时间\nasync time = await formatTime({format : "yyyy-MM-dd HH:mm:ss"})\n'}}]);
//# sourceMappingURL=chunk-2d0c51d8.fdd4c33a.js.map