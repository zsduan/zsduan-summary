(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-27b8c1a5","chunk-2d0aed27"],{"0c64":function(e,t,n){"use strict";n.r(t),n.d(t,"code1",(function(){return r})),n.d(t,"code2",(function(){return o}));const r='\n// 使用方法1\nimport {CreatedTreeNode} from "../../utils/binary-tree";\n// 具有方法\n/*\n * method insert 插入节点\n * method romve 删除节点\n * method find 查找节点\n * method getMaxNode 获取最大节点\n * method getMinNode 获取最小节点\n * \n*/ \n/*\n * 优点 导入之后 编辑器有提示可以操作的函数提示 \n * 缺点 导入之后只能用它 不能多变量使用\n*/\n// 使用\nCreatedTreeNode.insert(4);\nCreatedTreeNode.insert(3);\nCreatedTreeNode.insert(5);\nCreatedTreeNode.insert(6);\nCreatedTreeNode.insert(2);\nconsole.log("二叉树 ==>" ,CreatedTreeNode)\nconsole.log("最小值 ==>" , CreatedTreeNode.getMinNode());\nconsole.log("最大值 ==>" , CreatedTreeNode.getMaxNode());\nconsole.log("查询 ==>" , CreatedTreeNode.find(5));\nCreatedTreeNode.romve(5)\nconsole.log("删除 ==>" ,  CreatedTreeNode);\nconsole.log("最小值 ==>" , CreatedTreeNode.getMinNode());\n',o='\n// 使用方法2\nimport {CreatedTreeNodes} from "../../utils/binary-tree";\n// 具有方法\n/*\n * parame TreeNode 原始节点 非必填\n * method fail 失败返回\n * method success 成功返回\n * \n*/ \n// 其他说明\n/*返回成功后 使用的方法和使用方法1是一致的*/ \n/*\n * 优点 导入之后 可以多处使用 还可以使用上一个的二叉树\n * 缺点 导入之后 没有智能提示\n*/ \n\n// 使用\nlet TreeNode = null;\nCreatedTreeNodes({\n    success : (res)=>{\n        TreeNode = res;\n        reeNode.insert(2);\n        console.log(TreeNode);\n    }\n})\n'},b502:function(e,t,n){"use strict";n.r(t);var r=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[e.newIndex?e._e():n("dzs-header",{attrs:{title:"二叉树"}}),n("div",{staticClass:"page"},[n("h2",[e._v("基础用法")]),n("div",{staticClass:"item"},[n("dzs-code",{attrs:{title:"使用方法",value:e.code1}})],1),n("h2",[e._v("可以自定义原始数据")]),n("div",{staticClass:"item"},[n("dzs-code",{attrs:{title:"使用方法",value:e.code2}})],1),n("h2",[e._v("源代码下载/查看")]),e._m(0)]),e.newIndex?e._e():n("el-backtop",{attrs:{"visibility-height":20}})],1)},o=[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"item"},[n("a",{attrs:{target:"_blank",href:"https://github.com/zsduan/zsduan-summary/blob/master/src/utils/binary-tree.js"}},[e._v("下载/查看地址")])])}];n("6e9f");function i(e,t){if(t.has(e))throw new TypeError("Cannot initialize the same private elements twice on an object")}function a(e,t){i(e,t),t.add(e)}function d(e,t,n){if(!t.has(e))throw new TypeError("attempted to get private field on non-instance");return n}class s{constructor(e,t,n){this.data=e,this.left=t,this.right=n,this.count=1}}var l=new WeakSet;class c{constructor(e=null){a(this,l),this.root=e||null}romve(e){this.root=d(this,l,h).call(this,this.root,e)}insert(e){let t=new s(e,null,null);if(!this.root)return void(this.root=t);let n=this.root,r=null;while(1)if(r=n,t.data<n.data){if(n=n.left,!n){r.left=t;break}}else if(t.data>n.data){if(n=n.right,!n){r.right=t;break}}else if(t.data==n.data){n.count++;break}}find(e){let t=this.root;while(t){if(t.data==e)return t;t=t.data<e?t.right:t.left}return null}getMinNode(e=this.root){if(!e)return null;let t=e;while(t.left)t=t.left;return t}getMaxNode(e=this.root){if(!e)return null;let t=e;while(t.right)t=t.right;return t}}function h(e,t){if(!e)return null;if(t==e.data){if(!e.left&&!e.right)return null;if(!e.left)return e.right;if(!e.right)return e.left;let t=this.getMinNode(e.right);return e.data=t.data,e.right=d(this,l,h).call(this,e.right,t.data),e}return t<e.data?(e.left=d(this,l,h).call(this,e.left,t),e):(e.right=d(this,l,h).call(this,e.right,t),e)}new c;var u=n("0c64"),f={props:{newIndex:{type:Boolean,default:()=>!1}},data(){return{code1:u["code1"],code2:u["code2"]}},mounted(){}},g=f,m=n("e607"),N=Object(m["a"])(g,r,o,!1,null,"1449c6a0",null);t["default"]=N.exports}}]);
//# sourceMappingURL=chunk-27b8c1a5.3e0b88b9.js.map