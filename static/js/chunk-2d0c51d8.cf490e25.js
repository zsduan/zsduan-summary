(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0c51d8"],{"3e5e":function(n,t,e){"use strict";e.r(t),e.d(t,"code1",(function(){return a})),e.d(t,"code2",(function(){return r})),e.d(t,"code3",(function(){return i})),e.d(t,"code4",(function(){return m})),e.d(t,"code5",(function(){return o})),e.d(t,"code6",(function(){return s}));const a='\n// 共有两个方法 formatTime 和 asyncFormatTime 其中 asyncFormatTime 返回一个Promise对象\nimport {formatTime , asyncFormatTime , chainFormatTime} from "../../utils/format-time";\n\n\n/**\n * @name 格式化时间 \n * @description options 建议使用对象传参 也可以使用字符串 | 时间戳 | 日期对象\n * @description 所有参数不传时 默认为当前时间\n * @param {Object | string | Date | number} [options] 配置对象 | 日期字符串 | 日期对象 | 时间戳\n * @param {String} options.format 格式化字符串 yyyy-MM-dd HH:mm:ss\n * @param {Date | string | number} [options.date] 日期对象 | 日期字符串 | 时间戳\n * @param {Function} [options.success] 成功返回\n * @param {Function} [options.fail] 失败返回\n * @param {Function} [options.complete] 完成返回\n * @returns {String} 格式化后的时间\n * */\n\n// 方式一\nformatTime({\n    date : new Date(),\n    format : "yyyy-MM-dd HH:mm:ss",\n    success : (res)=>{\n        this.time2 = res\n    },\n    fail : (err)=>{\n        console.log(err)\n    },\n})\n\n// 方式二\nlet time = formatTime({\n    date : new Date(),\n    format : "yyyy-MM-dd",\n});\n\n// 方式三\nformatTime(new Date())\n\n// 方式四 Promise\nasyncFormatTime({\n    date : new Date(),\n    format : "yyyy-MM-dd HH:mm:ss",\n}).then((res)=>{\n    this.time3 = res\n}).catch((err)=>{\n    console.log(err)\n})\n\n// 方式五 链式调用\nchainFormatTime(new Date()).format("yyyy-MM-dd HH:mm:ss").time;\n\n// 方式六 统一调用 不支持Promise 但是支持回调\nimport {setTime} from "../../utils/format-time";\n/**\n* 格式化时间\n* @param {Object | string | number | Date | Function} [options] 配置参数/回调函数 可以是对象 字符串 时间戳 时间对象\n* @param {string | number | Date} [options.date] 时间\n* @param {string} [options.format] 格式化方式 yyyy-MM-dd HH:mm:ss\n* @param {Function} [callback] 回调函数\n* @returns {string} 格式化后的时间\n* */ \nsetTime.format({\n    date : new Date(),\n    format : "yyyy-MM-dd HH:mm:ss"\n})\n',r='\nimport {setTime} from "../../utils/format-time";\n/**\n* 对比时间差\n* @param {Object} options 配置参数\n* @param {Date | string | number} options.startDate 开始时间\n* @param {Date | string | number} [options.endDate] 结束时间 不传默认为当前时间\n* @param {Function} [callback] 回调函数\n* @returns {Object} 对比后的时间差\n* @description 返回的数据格式 {allday : 0 , day : 0 , hours : 0 , allHours : 0 , minutes : 0 , allMinutes : 0 , seconds : 0 , allSeconds : 0 , timeDiff : 0}\n* */ \nthis.diffTime = setTime.diff({\n    startDate : "2024-01-01 12:00:00",\n    endDate : "2023-01-01 18:00:00",\n})\n',i='\nimport {setTime} from "../../utils/format-time";\n/**\n* 前n天(小时/周)后n天(小时/周) 前用负数 后用正数\n* @param {Object | Function} [options] 配置参数/回调函数\n* @param {Date | string | number} [options.date] 时间 默认为当前时间\n* @param {number} [options.num] 需要前后多少天(小时/周) 默认1\n* @param {string} [options.type] 类型 day hour week 默认 day\n* @param {Function} [callback] 回调函数\n* @returns {Object} 时间信息\n* */ \nthis.lastTime = setTime.last({\n    date : new Date(),\n    num : 2 ,\n    type : "day"\n})\n',m='\nimport {setTime} from "../../utils/format-time";\n/**\n* 获取当前日期是星期几\n* @param {Date | string | number | Function} [date] 时间/直接为回调函数 默认为当前时间 \n* @param {Function} [callback] 回调函数\n* @return {String} 返回星期几\n* */ \nthis.week = setTime.week()\n',o='\nimport {setTime} from "../../utils/format-time";\n/**\n* 指定日期是当前(年、月、周)的多少天\n* @param {Object | Function} [options] 配置参数/回调函数\n* @param {Date | string | number} [options.date] 时间 默认为当前时间\n* @param {string} [options.type] 类型 year month week 默认 year\n* @param {Function} [callback] 回调函数\n* @returns {Number} 返回指定日期是当前(年、月、周)的多少天\n* */ \nthis.day= setTime.day({\n    date : new Date(),\n    type : "year"\n})\n',s='\nimport {setTime} from "../../utils/format-time";\n/**\n* 是否为闰年\n* @param {Date | string | number | Function} [date] 时间/直接为回调函数 默认为当前时间\n* @param {Function} [callback] 回调函数\n* @returns {Boolean} 返回是否为闰年\n* */ \nthis.leapYear =setTime.leapYear(new Date())\n'}}]);
//# sourceMappingURL=chunk-2d0c51d8.cf490e25.js.map