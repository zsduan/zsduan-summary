{"version":3,"sources":["webpack:///./src/views/JS-article/date-to-calender/index.vue","webpack:///./src/tool/calender.js","webpack:///src/views/JS-article/date-to-calender/index.vue","webpack:///./src/views/JS-article/date-to-calender/index.vue?c724","webpack:///./src/views/JS-article/date-to-calender/index.vue?ebb3","webpack:///./src/tool/format-time.js","webpack:///(webpack)/buildin/harmony-module.js","webpack:///./src/views/JS-article/date-to-calender/desc.js","webpack:///./src/views/JS-article/date-to-calender/config.js"],"names":["render","_vm","this","_c","_self","attrs","code1","on","getCalender","model","value","date","callback","$$v","expression","_v","_s","calender","tableData","returnTableData","links","staticRenderFns","calendar","gregorianYear","gregorianMonth","gregorianDay","weekday","hours","minutes","seconds","lunarYear","lunarMonth","lunarDay","lunarYearCn","lunarMonthCn","lunarDayCn","zodiacYear","solarTerm","gregorianFestival","lunarFestival","now","lunarInfo","zodiacs","Gan","Zhi","traditional_festival","name","mouth","day","festival","cyclical","num","lYearDays","year","i","sum","leapDays","leapMonth","monthDays","month","Lunar","objDate","temp","baseDate","Date","offset","Math","floor","dayCyl","monCyl","yearCyl","leap","isLeap","cDay","m","d","nStr1","nStr2","getSolarTerm","GY","GD","GM","sTermInfo","solarTerms","tmp1","UTC","tmp2","getUTCDate","getTraditionalFestival","Festival","filter","item","getMonth","getDate","length","getFestival","getCalendar","option","options","time","success","reslut","fail","error","Object","assign","getFullYear","getHours","getMinutes","getSeconds","toString","padStart","getDay","sDObj","lDObj","data","title","code","lang","formatTime","href","methods","component","_formatTime","format","hour","minute","second","millisecond","getMilliseconds","o","k","test","replace","RegExp","$1","substr","String","prototype","call","Error","isInternal","complete","msg","asyncFormatTime","Promise","resolve","reject","chainFormatTime","returnTime","formatStr","Time","timeInfo","_format","diff","_diff","last","_last","week","_week","_day","leapYear","_leapYear","_getNowDate","getTime","dateInfo","startDate","endDate","timeDiff","sendData","allday","allHours","allMinutes","allSeconds","Number","toFixed","type","previousDate","nextDate","nowDate","setDate","setHours","weekList","start","oneDay","setTime","install","Vue","$formatTime","$asyncFormatTime","$chainFormatTime","$setTime","module","exports","originalModule","webpackPolyfill","create","children","defineProperty","enumerable","get","l","key","parameterType","desc","remark"],"mappings":"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","file":"static/js/chunk-a80546da.d9d0f362.js","sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('section',[_c('public-item',{attrs:{\"title\":\"基础用法\",\"code\":_vm.code1}},[_c('el-date-picker',{attrs:{\"type\":\"date\",\"value-format\":\"yyyy-MM-dd\",\"placeholder\":\"选择日期\"},on:{\"change\":_vm.getCalender},model:{value:(_vm.date),callback:function ($$v) {_vm.date=$$v},expression:\"date\"}}),_c('div',[_vm._v(_vm._s(_vm.calender))])],1),_c('public-item',{attrs:{\"title\":\"参数说明\",\"list\":_vm.tableData}}),_c('public-item',{attrs:{\"title\":\"返回参数说明\",\"list\":_vm.returnTableData}}),_c('public-item',{attrs:{\"title\":\"源代码查看\",\"links\":_vm.links}}),_c('dzs-backtop',{attrs:{\"target\":\".el-main\"}})],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","/**\r\n * 日期转农历\r\n * @author zs.duan\r\n * @date 2022-09-30\r\n * */ \r\n\r\nconst calendar = {\r\n    gregorianYear: null, //公历年\r\n    gregorianMonth: null, //公历月\r\n    gregorianDay: null, //公历日\r\n    weekday: null, //星期\r\n    hours: null,\r\n    minutes: null,\r\n    seconds: null,\r\n\r\n    lunarYear: null, //农历年\r\n    lunarMonth: null, //农历月\r\n    lunarDay: null, //农历日\r\n\r\n    lunarYearCn: \"\", //农历天干地支纪年\r\n    lunarMonthCn: \"\", //农历中文月\r\n    lunarDayCn: \"\", //农历中文日\r\n    zodiacYear: \"\", //农历生肖年\r\n\r\n    solarTerm: \"\", //节气\r\n    gregorianFestival: \"\", //公历节日\r\n    lunarFestival: \"\", //农历节日\r\n};\r\n\r\nlet now = null ; //全局时间变量\r\n\r\n// 年份列表\r\nlet lunarInfo = [\r\n    0x04bd8, 0x04ae0, 0x0a570, 0x054d5, 0x0d260, 0x0d950, 0x16554, 0x056a0,\r\n    0x09ad0, 0x055d2, 0x04ae0, 0x0a5b6, 0x0a4d0, 0x0d250, 0x1d255, 0x0b540,\r\n    0x0d6a0, 0x0ada2, 0x095b0, 0x14977, 0x04970, 0x0a4b0, 0x0b4b5, 0x06a50,\r\n    0x06d40, 0x1ab54, 0x02b60, 0x09570, 0x052f2, 0x04970, 0x06566, 0x0d4a0,\r\n    0x0ea50, 0x06e95, 0x05ad0, 0x02b60, 0x186e3, 0x092e0, 0x1c8d7, 0x0c950,\r\n    0x0d4a0, 0x1d8a6, 0x0b550, 0x056a0, 0x1a5b4, 0x025d0, 0x092d0, 0x0d2b2,\r\n    0x0a950, 0x0b557, 0x06ca0, 0x0b550, 0x15355, 0x04da0, 0x0a5d0, 0x14573,\r\n    0x052d0, 0x0a9a8, 0x0e950, 0x06aa0, 0x0aea6, 0x0ab50, 0x04b60, 0x0aae4,\r\n    0x0a570, 0x05260, 0x0f263, 0x0d950, 0x05b57, 0x056a0, 0x096d0, 0x04dd5,\r\n    0x04ad0, 0x0a4d0, 0x0d4d4, 0x0d250, 0x0d558, 0x0b540, 0x0b5a0, 0x195a6,\r\n    0x095b0, 0x049b0, 0x0a974, 0x0a4b0, 0x0b27a, 0x06a50, 0x06d40, 0x0af46,\r\n    0x0ab60, 0x09570, 0x04af5, 0x04970, 0x064b0, 0x074a3, 0x0ea50, 0x06b58,\r\n    0x055c0, 0x0ab60, 0x096d5, 0x092e0, 0x0c960, 0x0d954, 0x0d4a0, 0x0da50,\r\n    0x07552, 0x056a0, 0x0abb7, 0x025d0, 0x092d0, 0x0cab5, 0x0a950, 0x0b4a0,\r\n    0x0baa4, 0x0ad50, 0x055d9, 0x04ba0, 0x0a5b0, 0x15176, 0x052b0, 0x0a930,\r\n    0x07954, 0x06aa0, 0x0ad50, 0x05b52, 0x04b60, 0x0a6e6, 0x0a4e0, 0x0d260,\r\n    0x0ea65, 0x0d530, 0x05aa0, 0x076a3, 0x096d0, 0x04bd7, 0x04ad0, 0x0a4d0,\r\n    0x1d0b6, 0x0d250, 0x0d520, 0x0dd45, 0x0b5a0, 0x056d0, 0x055b2, 0x049b0,\r\n    0x0a577, 0x0a4b0, 0x0aa50, 0x1b255, 0x06d20, 0x0ada0,\r\n];\r\n\r\nlet zodiacs = [\r\n    \"鼠\",\r\n    \"牛\",\r\n    \"虎\",\r\n    \"兔\",\r\n    \"龙\",\r\n    \"蛇\",\r\n    \"马\",\r\n    \"羊\",\r\n    \"猴\",\r\n    \"鸡\",\r\n    \"狗\",\r\n    \"猪\",\r\n];\r\nlet Gan = [\"甲\", \"乙\", \"丙\", \"丁\", \"戊\", \"己\", \"庚\", \"辛\", \"壬\", \"癸\"];\r\nlet Zhi = [\r\n    \"子\",\r\n    \"丑\",\r\n    \"寅\",\r\n    \"卯\",\r\n    \"辰\",\r\n    \"巳\",\r\n    \"午\",\r\n    \"未\",\r\n    \"申\",\r\n    \"酉\",\r\n    \"戌\",\r\n    \"亥\",\r\n];\r\nlet weekday = [\r\n    \"星期一\",\r\n    \"星期二\",\r\n    \"星期三\",\r\n    \"星期四\",\r\n    \"星期五\",\r\n    \"星期六\",\r\n    \"星期日\",\r\n];\r\n\r\nlet traditional_festival = [\r\n    {\r\n        name: \"除夕\",\r\n        mouth: \"腊月\",\r\n        day: \"三十\",\r\n    },\r\n    {\r\n        name: \"大年初一\",\r\n        mouth: \"正月\",\r\n        day: \"初一\",\r\n    },\r\n    {\r\n        name: \"元宵节\",\r\n        mouth: \"正月\",\r\n        day: \"十五\",\r\n    },\r\n    {\r\n        name: \"端午节\",\r\n        mouth: \"五月\",\r\n        day: \"初五\",\r\n    },\r\n    {\r\n        name: \"七夕节\",\r\n        mouth: \"七月\",\r\n        day: \"初七\",\r\n    },\r\n    {\r\n        name: \"中秋节\",\r\n        mouth: \"八月\",\r\n        day: \"十五\",\r\n    },\r\n    {\r\n        name: \"重阳节\",\r\n        mouth: \"九月\",\r\n        day: \"初九\",\r\n    },\r\n    {\r\n        name: \"腊八节\",\r\n        mouth: \"腊月\",\r\n        day: \"初八\",\r\n    },\r\n    {\r\n        name: \"龙抬头\",\r\n        mouth: \"二月\",\r\n        day: \"初二\",\r\n    },\r\n    {\r\n        name: \"中元节\",\r\n        mouth: \"七月\",\r\n        day: \"十五\",\r\n    },\r\n];\r\n\r\nconst festival = [\r\n    {\r\n        name: \"清明节\",\r\n        mouth: 4,\r\n        day: 5,\r\n    },\r\n    {\r\n        name: \"国际妇女节\",\r\n        mouth: 3,\r\n        day: 8,\r\n    },\r\n    {\r\n        name: \"植树节\",\r\n        mouth: 3,\r\n        day: 12,\r\n    },\r\n    {\r\n        name: \"国际劳动节\",\r\n        mouth: 5,\r\n        day: 1,\r\n    },\r\n    {\r\n        name: \"儿童节\",\r\n        mouth: 6,\r\n        day: 1,\r\n    },\r\n    {\r\n        name: \"中国共产党诞生纪念日\",\r\n        mouth: 7,\r\n        day: 1,\r\n    },\r\n    {\r\n        name: \"中国人民解放军建军纪念日\",\r\n        mouth: 8,\r\n        day: 1,\r\n    },\r\n    {\r\n        name: \"教师节\",\r\n        mouth: 9,\r\n        day: 10,\r\n    },\r\n    {\r\n        name: \"国庆节\",\r\n        mouth: 10,\r\n        day: 1,\r\n    },\r\n    {\r\n        name: \"元旦\",\r\n        mouth: 1,\r\n        day: 1,\r\n    },\r\n    {\r\n        name: \"平安夜\",\r\n        mouth: 12,\r\n        day: 24,\r\n    },\r\n    {\r\n        name: \"圣诞节\",\r\n        mouth: 12,\r\n        day: 25,\r\n    },\r\n    {\r\n        name: \"感恩节\",\r\n        mouth: 11,\r\n        day: 25,\r\n    },\r\n    {\r\n        name: \"父亲节\",\r\n        mouth: 6,\r\n        day: 20,\r\n    },\r\n    {\r\n        name: \"愚人节\",\r\n        mouth: 4,\r\n        day: 1,\r\n    },\r\n    {\r\n        name: \"消费者权益保护日\",\r\n        mouth: 3,\r\n        day: 15,\r\n    },\r\n    {\r\n        name: \"青年节\",\r\n        mouth: 5,\r\n        day: 4,\r\n    },\r\n];\r\n\r\n//==== 传入 offset 传回干支, 0=甲子\r\nfunction cyclical(num) {\r\n    return Gan[num % 10] + Zhi[num % 12];\r\n}\r\n\r\n//==== 传回农历 year年的总天数\r\nfunction lYearDays(year) {\r\n    let i,\r\n        sum = 348;\r\n    for (i = 0x8000; i > 0x8; i >>= 1) {\r\n        sum += lunarInfo[year - 1900] & i ? 1 : 0;\r\n    }\r\n    return sum + leapDays(year);\r\n}\r\n\r\n//==== 传回农历 year年闰月的天数\r\nfunction leapDays(year) {\r\n    if (leapMonth(year)) {\r\n        return lunarInfo[year - 1900] & 0x10000 ? 30 : 29;\r\n    } else {\r\n        return 0;\r\n    }\r\n}\r\n\r\n//==== 传回农历 year年闰哪个月 1-12 , 没闰传回 0\r\nfunction leapMonth(year) {\r\n    return lunarInfo[year - 1900] & 0xf;\r\n}\r\n\r\n//==== 传回农历 year年month月的总天数\r\nfunction monthDays(year, month) {\r\n    return lunarInfo[year - 1900] & (0x10000 >> month) ? 30 : 29;\r\n}\r\n\r\n//==== 算出农历, 传入日期对象, 传回农历日期对象\r\n//     该对象属性有 农历年year 农历月month 农历日day 是否闰年isLeap yearCyl dayCyl monCyl\r\nfunction Lunar(objDate) {\r\n    let i,\r\n        temp = 0;\r\n    let baseDate = new Date(1900, 0, 31);\r\n    let offset = Math.floor((objDate - baseDate) / 86400000);\r\n\r\n    let dayCyl = offset + 40;\r\n    let monCyl = 14;\r\n\r\n    for (i = 1900; i < 2050 && offset > 0; i++) {\r\n        temp = lYearDays(i);\r\n        offset -= temp;\r\n        monCyl += 12;\r\n    }\r\n    if (offset < 0) {\r\n        offset += temp;\r\n        i--;\r\n        monCyl -= 12;\r\n    }\r\n    //农历年\r\n    let year = i;\r\n    let yearCyl = i - 1864;\r\n\r\n    let leap = leapMonth(i); //闰哪个月\r\n    let isLeap = false; //是否闰年\r\n\r\n    for (i = 1; i < 13 && offset > 0; i++) {\r\n        //闰月\r\n        if (leap > 0 && i === leap + 1 && isLeap === false) {\r\n            --i;\r\n            isLeap = true;\r\n            temp = leapDays(year);\r\n        } else {\r\n            temp = monthDays(year, i);\r\n        }\r\n\r\n        //解除闰月\r\n        if (isLeap === true && i === leap + 1) {\r\n            isLeap = false;\r\n        }\r\n\r\n        offset -= temp;\r\n        if (isLeap === false) {\r\n            monCyl++;\r\n        }\r\n    }\r\n\r\n    if (offset === 0 && leap > 0 && i === leap + 1)\r\n        if (isLeap) {\r\n            isLeap = false;\r\n        } else {\r\n            isLeap = true;\r\n            --i;\r\n            --monCyl;\r\n        }\r\n\r\n    if (offset < 0) {\r\n        offset += temp;\r\n        --i;\r\n        --monCyl;\r\n    }\r\n    //农历月\r\n    let month = i;\r\n    //农历日\r\n    let day = offset + 1;\r\n\r\n    return {\r\n        year: year,\r\n        month: month,\r\n        day: day,\r\n        isLeap: isLeap,\r\n        leap: leap,\r\n        yearCyl: yearCyl,\r\n        dayCyl: dayCyl,\r\n        monCyl: monCyl,\r\n    };\r\n}\r\n\r\n//==== 中文日期 m为传入月份，d为传入日期\r\nfunction cDay(m, d) {\r\n    let nStr1 = [\r\n        \"日\",\r\n        \"一\",\r\n        \"二\",\r\n        \"三\",\r\n        \"四\",\r\n        \"五\",\r\n        \"六\",\r\n        \"七\",\r\n        \"八\",\r\n        \"九\",\r\n        \"十\",\r\n    ];\r\n    let nStr2 = [\"初\", \"十\", \"廿\", \"卅\", \"\"];\r\n    //农历中文月\r\n    let lunarMonthCn;\r\n    //农历中文日\r\n    let lunarDayCn;\r\n    if (m > 10) {\r\n        lunarMonthCn = \"十\" + nStr1[m - 10];\r\n        if (nStr1[m - 10] == \"二\") {\r\n            lunarMonthCn = \"腊\";\r\n        }\r\n    } else {\r\n        lunarMonthCn = nStr1[m];\r\n        if (nStr1[m] == \"一\") {\r\n            lunarMonthCn = \"正\";\r\n        }\r\n    }\r\n    lunarMonthCn += \"月\";\r\n\r\n    switch (d) {\r\n        case 10:\r\n            lunarDayCn = \"初十\";\r\n            break;\r\n        case 20:\r\n            lunarDayCn = \"二十\";\r\n            break;\r\n        case 30:\r\n            lunarDayCn = \"三十\";\r\n            break;\r\n        default:\r\n            lunarDayCn = nStr2[Math.floor(d / 10)] + nStr1[d % 10];\r\n    }\r\n    return {\r\n        lunarMonthCn: lunarMonthCn,\r\n        lunarDayCn: lunarDayCn,\r\n    };\r\n}\r\n\r\n//节气\r\n// 按地球每转过15°为一节气，因为地球轨道是椭圆所以会存在计算误差，数组里数据对应各个节气距离一年起点的毫秒数\r\n// 31556925974.7为地球公转周期天数换算的毫秒数(约365.2422天)\r\n// Date.UTC(1900,0,6,2,5)为日期1900-01-06 02:05毫秒数\r\nfunction getSolarTerm(GY, GD, GM) {\r\n    let sTermInfo = [\r\n        0, 21208, 42467, 63836, 85337, 107014, 128867, 150921, 173149, 195551,\r\n        218072, 240693, 263343, 285989, 308563, 331033, 353350, 375494, 397447,\r\n        419210, 440795, 462224, 483532, 504758,\r\n    ];\r\n    let solarTerm = [\r\n        \"小寒\",\r\n        \"大寒\",\r\n        \"立春\",\r\n        \"雨水\",\r\n        \"惊蛰\",\r\n        \"春分\",\r\n        \"清明\",\r\n        \"谷雨\",\r\n        \"立夏\",\r\n        \"小满\",\r\n        \"芒种\",\r\n        \"夏至\",\r\n        \"小暑\",\r\n        \"大暑\",\r\n        \"立秋\",\r\n        \"处暑\",\r\n        \"白露\",\r\n        \"秋分\",\r\n        \"寒露\",\r\n        \"霜降\",\r\n        \"立冬\",\r\n        \"小雪\",\r\n        \"大雪\",\r\n        \"冬至\",\r\n    ];\r\n\r\n    let solarTerms = \"\";\r\n    let tmp1 = new Date(\r\n        31556925974.7 * (GY - 1900) +\r\n        sTermInfo[GM * 2 + 1] * 60000 +\r\n        Date.UTC(1900, 0, 6, 2, 5)\r\n    );\r\n    let tmp2 = tmp1.getUTCDate();\r\n    if (tmp2 === GD) solarTerms = solarTerm[GM * 2 + 1];\r\n    tmp1 = new Date(\r\n        31556925974.7 * (GY - 1900) +\r\n        sTermInfo[GM * 2] * 60000 +\r\n        Date.UTC(1900, 0, 6, 2, 5)\r\n    );\r\n    tmp2 = tmp1.getUTCDate();\r\n    if (tmp2 === GD) solarTerms = solarTerm[GM * 2];\r\n\r\n    return solarTerms;\r\n}\r\n\r\n// 获取传统节日\r\nfunction getTraditionalFestival(mouth, day) {\r\n    \r\n    let Festival = traditional_festival.filter((item) => {\r\n        return item.mouth == mouth && item.day == day;\r\n    });\r\n    // 处理腊月廿九 就是过年的问题\r\n    if(mouth === '腊月' && day == '廿九'){\r\n        let lunarDayCn =  cDay(now.getMonth(), now.getDate()).lunarDayCn;\r\n        if(lunarDayCn !== '三十'){\r\n            return \"春节\"\r\n        }\r\n    }\r\n    return Festival.length ? Festival[0].name : \"\";\r\n}\r\n\r\n// 获取公立节日\r\nfunction getFestival(mouth, day) {\r\n    let Festival = festival.filter((item) => {\r\n        return item.mouth == mouth && item.day == day;\r\n    });\r\n    return Festival.length ? Festival[0].name : \"\";\r\n}\r\n\r\n/**\r\n * @name 获取农历\r\n * @param {object} option 配置对象\r\n * @param {string | Date } option.time 时间\r\n * @param {Function} [option.success] 成功返回\r\n * @param {Function} [option.fail] 失败返回\r\n * @return {\r\n *   gregorianYear: null, //公历年\r\n *   gregorianMonth: null, //公历月\r\n *   gregorianDay: null, //公历日\r\n *   weekday: null, //星期\r\n *   hours: null,\r\n *   minutes: null,\r\n *   seconds: null,\r\n *   lunarYear: null, //农历年\r\n *   lunarMonth: null, //农历月\r\n *   lunarDay: null, //农历日\r\n *   lunarYearCn: \"\", //农历天干地支纪年\r\n *   lunarMonthCn: \"\", //农历中文月\r\n *   lunarDayCn: \"\", //农历中文日\r\n *   zodiacYear: \"\", //农历生肖年\r\n *   solarTerm: \"\", //节气\r\n *   gregorianFestival: \"\", //公历节日\r\n *   lunarFestival: \"\", //农历节日\r\n * }\r\n*/ \r\nfunction getCalendar(option) {\r\n    let options = {\r\n        time : \"\",\r\n        success : (reslut) =>{},\r\n        fail : (error) =>{},\r\n    }\r\n    if(!option.time && option){\r\n        options.time = option;\r\n        option = {};\r\n    }\r\n    Object.assign(options, option);\r\n    try{\r\n        options.time = options.time ? new Date(options.time) : new Date();\r\n    }catch(error){\r\n        options.fail(error);\r\n        return error\r\n    }\r\n    now = options.time;\r\n    //用于计算农历年月日的数据\r\n    let GY = now.getFullYear();\r\n    let GM = now.getMonth();\r\n    let GD = now.getDate();\r\n\r\n    let year = now.getFullYear();\r\n    let month = now.getMonth() + 1;\r\n    let date = now.getDate();\r\n    let hours = now.getHours();\r\n    let minutes = now.getMinutes();\r\n    let seconds = now.getSeconds();\r\n    month = month.toString().padStart(2, \"0\");\r\n    date = date.toString().padStart(2, \"0\");\r\n    hours = hours.toString().padStart(2, \"0\");\r\n    minutes = minutes.toString().padStart(2, \"0\");\r\n    seconds = seconds.toString().padStart(2, \"0\");\r\n\r\n    //公历年月日、星期、时分秒\r\n    calendar.gregorianYear = year;\r\n    calendar.gregorianMonth = month;\r\n    calendar.gregorianDay = date;\r\n    calendar.weekday = weekday[now.getDay() - 1];\r\n    calendar.hours = hours;\r\n    calendar.minutes = minutes;\r\n    calendar.seconds = seconds;\r\n    calendar.gregorianFestival = getFestival(month, date);\r\n\r\n    //去掉时分秒的日期\r\n    let sDObj = new Date(GY, GM, GD);\r\n    let lDObj = new Lunar(sDObj);\r\n\r\n    //农历年月日、生肖年\r\n    calendar.lunarYear = lDObj.year;\r\n    calendar.lunarMonth = lDObj.month;\r\n    calendar.lunarDay = lDObj.day;\r\n    calendar.zodiacYear = zodiacs[(GY - 4) % 12];\r\n\r\n    //农历中文年月日\r\n    calendar.lunarYearCn = cyclical(GY - 1900 + 36);\r\n    calendar.lunarMonthCn = cDay(lDObj.month, lDObj.day).lunarMonthCn;\r\n    calendar.lunarDayCn = cDay(lDObj.month, lDObj.day).lunarDayCn;\r\n\r\n    calendar.lunarFestival = getTraditionalFestival(\r\n        calendar.lunarMonthCn,\r\n        calendar.lunarDayCn\r\n    );\r\n\r\n    //节气\r\n    calendar.solarTerm = getSolarTerm(GY, GD, GM);\r\n\r\n    options.success(calendar);\r\n    return calendar;\r\n}\r\n\r\nexport default getCalendar;\r\n","<template>\r\n    <section>\r\n        <public-item title=\"基础用法\" :code=\"code1\">\r\n            <el-date-picker v-model=\"date\" type=\"date\" value-format=\"yyyy-MM-dd\" placeholder=\"选择日期\" @change=\"getCalender\">\r\n            </el-date-picker>\r\n            <div>{{calender}}</div>\r\n        </public-item>\r\n        <public-item title=\"参数说明\" :list=\"tableData\"></public-item>\r\n        <public-item title=\"返回参数说明\" :list=\"returnTableData\"></public-item>\r\n        <public-item title=\"源代码查看\" :links=\"links\"></public-item>\r\n        <dzs-backtop  target=\".el-main\"></dzs-backtop>\r\n    </section>\r\n</template>\r\n<script>\r\nimport getCalendar from \"@/tool/calender\";\r\nimport { code1 } from \"./config.js\";\r\nimport { formatTime } from \"@/tool/format-time.js\";\r\nimport {tableData , returnTableData} from \"./desc.js\";\r\nexport default {\r\n    data() {\r\n        return {\r\n            code1: {\r\n                title: \"代码示例\",\r\n                code: code1,\r\n                lang: \"js\"\r\n            },\r\n            date: formatTime(),\r\n            links: {\r\n                href: \"https://github.com/zsduan/zsduan-summary/blob/master/src/tool/calender.js\",\r\n                title: \"源码\"\r\n            },\r\n            calender : getCalendar(new Date()),\r\n            tableData,\r\n            returnTableData\r\n        };\r\n    },\r\n    methods: {\r\n        getCalender(date) {\r\n            this.calender = getCalendar({\r\n                time : date,\r\n                success : (data) => {\r\n                    this.calender = data;\r\n                }\r\n            });\r\n        }\r\n    }\r\n};\r\n</script>\r\n<style lang=\"scss\" scoped></style>","import mod from \"-!../../../../node_modules/.store/cache-loader@4.1.0/node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../../node_modules/.store/thread-loader@2.1.3/node_modules/thread-loader/dist/cjs.js!../../../../node_modules/.store/babel-loader@8.3.0/node_modules/babel-loader/lib/index.js!../../../../node_modules/.store/cache-loader@4.1.0/node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../../node_modules/.store/vue-loader@15.11.1/node_modules/vue-loader/lib/index.js??vue-loader-options!./index.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../../node_modules/.store/cache-loader@4.1.0/node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../../node_modules/.store/thread-loader@2.1.3/node_modules/thread-loader/dist/cjs.js!../../../../node_modules/.store/babel-loader@8.3.0/node_modules/babel-loader/lib/index.js!../../../../node_modules/.store/cache-loader@4.1.0/node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../../node_modules/.store/vue-loader@15.11.1/node_modules/vue-loader/lib/index.js??vue-loader-options!./index.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./index.vue?vue&type=template&id=cce0b334&scoped=true\"\nimport script from \"./index.vue?vue&type=script&lang=js\"\nexport * from \"./index.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../node_modules/.store/vue-loader@15.11.1/node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"cce0b334\",\n  null\n  \n)\n\nexport default component.exports","/**\r\n * @name 格式化时间\r\n * @author zs.duan\r\n * @eamil zs.duan@qq.com\r\n * @version 2.0.0\r\n * @description 共有两个方法 formatTime 和 asyncFormatTime 其中 asyncFormatTime 返回一个Promise对象 \r\n * @description 可以使用 Vue.use(); 挂载到Vue原型上 $formatTime $asyncFormatTime\r\n * @description chainFormatTime 链式调用\r\n * */ \r\n\r\n/**\r\n * 格式化时间 内部方法\r\n * @param {Date} date 日期对象\r\n * @param {String} format 格式化字符串\r\n * */\r\nconst _formatTime = function (date, format) {\r\n    let year = date.getFullYear();\r\n    let month = date.getMonth() + 1;\r\n    let day = date.getDate();\r\n    let hour = date.getHours();\r\n    let minute = date.getMinutes();\r\n    let second = date.getSeconds();\r\n    let millisecond = date.getMilliseconds();\r\n    let o = {\r\n        \"M+\": month,\r\n        \"d+\": day,\r\n        \"H+\": hour,\r\n        \"m+\": minute,\r\n        \"s+\": second,\r\n        \"S+\": millisecond,\r\n    };\r\n    if (/(y+)/.test(format)) {\r\n        format = format.replace(\r\n            RegExp.$1,\r\n            (year + \"\").substr(4 - RegExp.$1.length)\r\n        );\r\n    }\r\n    for (var k in o) {\r\n        if (new RegExp(\"(\" + k + \")\").test(format)) {\r\n            format = format.replace(\r\n                RegExp.$1,\r\n                RegExp.$1.length == 1 ? o[k] : (\"00\" + o[k]).substr(String(o[k]).length)\r\n            );\r\n        }\r\n    }\r\n    return format;\r\n}\r\n\r\n\r\n/**\r\n * @name 格式化时间 \r\n * @description options 建议使用对象传参 也可以使用字符串 | 时间戳 | 日期对象\r\n * @description 所有参数不传时 默认为当前时间\r\n * @param {object | string | Date | number} [options] 配置对象 | 日期字符串 | 日期对象 | 时间戳\r\n * @param {string} options.format 格式化字符串 yyyy-MM-dd HH:mm:ss\r\n * @param {Date | string | number} [options.date] 日期对象 | 日期字符串 | 时间戳\r\n * @param {Function} [options.success] 成功返回\r\n * @param {Function} [options.fail] 失败返回\r\n * @param {Function} [options.complete] 完成返回\r\n * @returns {String} 格式化后的时间\r\n * */\r\nexport const formatTime = function (options) {\r\n    if(!options)options = {};\r\n    if (typeof options === 'string' || typeof options === 'number' || Object.prototype.toString.call(options) === '[object Date]') {\r\n        options = {\r\n            date: options\r\n        }\r\n    }\r\n    if (typeof options !== 'object' && options) {\r\n        throw new Error('options must be an object or string or number or Date object');\r\n    }\r\n    if(typeof options.date == 'string'){\r\n        options.date = options.date.replace(/-/g , '/');\r\n        options.date = options.date.replace(/T/g , ' ');\r\n        options.date = options.date.substr(0 , 19);\r\n    }\r\n    let option = {\r\n        format: \"yyyy-MM-dd HH:mm:ss\",\r\n        isInternal : false , // 是否是内部调用\r\n        date: new Date(),\r\n        success: function (reslut) { },\r\n        fail: function (error) { },\r\n        complete: function (reslut) { }\r\n    }\r\n    options = Object.assign(option, options);\r\n    let date = options.date;\r\n    let format = options.format;\r\n    if(!format)format = \"yyyy-MM-dd HH:mm:ss\";\r\n    if(!date)date = new Date();\r\n    if (typeof format !== 'string') {\r\n        options.complete({\r\n            code: -1,\r\n            msg: \"format 必须是字符串\"\r\n        });\r\n        options.fail('format 必须是字符串');\r\n        if(options.isInternal)return {code: -1, data: 'format 必须是字符串'};\r\n        throw new Error('format 必须是字符串');\r\n    }\r\n    try {\r\n        date = new Date(date);\r\n    }catch (error) {\r\n        options.complete({\r\n            code: -1,\r\n            msg: \"时间格式错误\"\r\n        });\r\n        options.fail('时间格式错误');\r\n        if(options.isInternal) return {code : -1 , data : '时间格式错误'};\r\n        throw new Error('时间格式错误');\r\n    }\r\n\r\n    let reslut = _formatTime(date, format);\r\n    options.complete({\r\n        code: 200,\r\n        msg: \"success\",\r\n        data: reslut\r\n    });\r\n    options.success(reslut);\r\n    if(options.isInternal) return {code : 200 , data : reslut};\r\n    return reslut;\r\n}\r\n\r\n/**\r\n * @name 格式化时间 \r\n * @description options 建议使用对象传参 也可以使用字符串 | 时间戳 | 日期对象\r\n * @description 所有参数不传时 默认为当前时间\r\n * @param {object | string | Date | number} [options] 配置对象 | 日期字符串 | 日期对象 | 时间戳\r\n * @param {String} options.format 格式化字符串 yyyy-MM-dd HH:mm:ss\r\n * @param {Date | string | number} [options.date] 日期对象 | 日期字符串 | 时间戳\r\n * @param {Function} [options.success] 成功返回\r\n * @param {Function} [options.fail] 失败返回\r\n * @param {Function} [options.complete] 完成返回\r\n * @returns {Promise} 返回一个Promise对象\r\n * */\r\nexport const asyncFormatTime = function (options = {}) {\r\n    options.isInternal = true;\r\n    let data = formatTime(options);\r\n    return new Promise((resolve, reject) => {\r\n        if(data.code == -1){\r\n            return reject(data.data);\r\n        }\r\n        resolve(data.data);\r\n    })\r\n}\r\n\r\n/**\r\n * 链式调用\r\n * @param {Date | string | number} [time] 日期对象 | 日期字符串 | 时间戳\r\n * @returns {Object} 返回一个对象\r\n * */ \r\nexport function chainFormatTime(time){\r\n    let returnTime = \"\";\r\n    if(!time)time = new Date();\r\n    if(typeof time == 'string'){\r\n        time = time.replace(/-/g , '/');\r\n        time = time.replace(/T/g , ' ');\r\n        time = time.substr(0 , 19);\r\n    }\r\n    try {\r\n        time = new Date(time);\r\n    }catch (error) {\r\n        throw new Error('时间格式错误');\r\n    }\r\n    function format(formatStr){\r\n        if(typeof formatStr !== 'string')throw new Error('format 必须是字符串');\r\n        returnTime = _formatTime(time, formatStr);\r\n        return this\r\n    }\r\n    \r\n    return {\r\n        format,\r\n        get time(){\r\n            return returnTime;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @name 时间处理 只支持链式调用 \r\n * @description 所有参数不传时 默认为当前时间\r\n * @description format 格式化时间\r\n * @description diff 对比时间差\r\n * @description last 前n天(小时/周)后n天(小时/周)\r\n * @description week 获取指定日期是星期几 \r\n * @description day 指定日期是当前(年、月、周)的多少天\r\n * @description leapYear 今年是否是闰年\r\n * */\r\nclass Time {\r\n    /**\r\n     * 格式化时间\r\n     * @param {Object | string | number | Date | Function} [options] 配置参数/回调函数 可以是对象 字符串 时间戳 时间对象\r\n     * @param {string | number | Date} [options.date] 时间\r\n     * @param {string} [options.format] 格式化方式 yyyy-MM-dd HH:mm:ss\r\n     * @param {Function} [callback] 回调函数\r\n     * @returns {string} 格式化后的时间\r\n     * */ \r\n    format(options , callback){\r\n        if(typeof options == 'function'){\r\n            callback = options;\r\n            options = {};\r\n        }\r\n        \r\n        if(!callback) callback = (timeInfo) =>{};\r\n        return _format(options , callback);\r\n    };\r\n    /**\r\n     * 对比时间差\r\n     * @param {Object} options 配置参数\r\n     * @param {Date | string | number} options.startDate 开始时间\r\n     * @param {Date | string | number} [options.endDate] 结束时间 不传默认为当前时间\r\n     * @param {Function} [callback] 回调函数\r\n     * @returns {Object} 对比后的时间差\r\n     * @description 返回的数据格式 {allday : 0 , day : 0 , hours : 0 , allHours : 0 , minutes : 0 , allMinutes : 0 , seconds : 0 , allSeconds : 0 , timeDiff : 0}\r\n     * */ \r\n    diff(options , callback){\r\n        if(!callback) callback = (timeInfo) =>{};\r\n        return _diff(options , callback)\r\n    };\r\n    /**\r\n     * 前n天(小时/周)后n天(小时/周) 前用负数 后用正数\r\n     * @param {Object | Function} [options] 配置参数/回调函数\r\n     * @param {Date | string | number} [options.date] 时间 默认为当前时间\r\n     * @param {number} [options.num] 需要前后多少天(小时/周) 默认1\r\n     * @param {string} [options.type] 类型 day hour week 默认 day\r\n     * @param {string} [options.format] 格式化方式 默认 yyyy-MM-dd\r\n     * @param {Function} [callback] 回调函数\r\n     * @returns {Object} 时间信息\r\n     * */ \r\n    last(options , callback){\r\n        if(!callback) callback = (timeInfo) =>{};\r\n        if(typeof options == 'function'){\r\n            callback = options;\r\n            options = {};\r\n        }\r\n        return _last(options , callback)\r\n    };\r\n    /**\r\n     * 获取当前日期是星期几\r\n     * @param {Date | string | number | Function} [date] 时间/直接为回调函数 默认为当前时间 \r\n     * @param {Function} [callback] 回调函数\r\n     * @return {String} 返回星期几\r\n     * */ \r\n    week(date , callback){\r\n        if(typeof date == 'function'){\r\n            callback = date;\r\n            date = null;\r\n        }\r\n        if(!callback) callback = (timeInfo) =>{};\r\n        return _week(date , callback)\r\n    };\r\n    /**\r\n     * 指定日期是当前(年、月、周)的多少天\r\n     * @param {Object | Function} [options] 配置参数/回调函数\r\n     * @param {Date | string | number} [options.date] 时间 默认为当前时间\r\n     * @param {string} [options.type] 类型 year month week 默认 year\r\n     * @param {Function} [callback] 回调函数\r\n     * @returns {Number} 返回指定日期是当前(年、月、周)的多少天\r\n     * */ \r\n    day(options , callback){\r\n        if(!callback) callback = (timeInfo) =>{};\r\n        if(typeof options == 'function'){\r\n            callback = options;\r\n            options = {};\r\n        }\r\n        return _day(options , callback)\r\n    };\r\n    /**\r\n     * 是否为闰年\r\n     * @param {Date | string | number | Function} [date] 时间/直接为回调函数 默认为当前时间\r\n     * @param {Function} [callback] 回调函数\r\n     * @returns {Boolean} 返回是否为闰年\r\n     * */ \r\n    leapYear(date , callback){\r\n        if(!callback) callback = (timeInfo) =>{};\r\n        if(typeof date == 'function'){\r\n            callback = date;\r\n            date = null;\r\n        }\r\n        return _leapYear(date , callback);\r\n    };\r\n}\r\n\r\n/**获取当前时间的年月日 时分秒 时间戳*/\r\nfunction _getNowDate(date , format = 'yyyy-MM-dd HH:mm:ss'){\r\n    if(!date)date = new Date();\r\n    let year = date.getFullYear();\r\n    let month = date.getMonth() + 1;\r\n    let day = date.getDate();\r\n    let hour = date.getHours();\r\n    let minutes = date.getMinutes();\r\n    let seconds = date.getSeconds();\r\n    let time = date.getTime();\r\n    date = formatTime({\r\n        format : format,\r\n        date : date\r\n    })\r\n    return {year,month,day,hour,minutes,seconds ,time , date}\r\n} \r\n\r\n/**格式化时间*/ \r\nfunction _format(options , callback){\r\n    let data = formatTime(options);\r\n    if(data.code == -1) return;\r\n    let date = options.date ? new Date(options.date) : new Date();\r\n    callback({\r\n        dateInfo:_getNowDate(date),\r\n        date : data,\r\n    })\r\n    return data\r\n}\r\n\r\n/**对比时间差*/ \r\nfunction _diff(options , callback){\r\n    if(typeof options !== 'object')throw new Error('options must be an object');\r\n    if(!options.startDate)throw new Error('startDate must be null');\r\n    if(!options.endDate)options.endDate = new Date();\r\n    if(options.startDate && typeof options.startDate == 'string'){\r\n        options.startDate = options.startDate.replace(/-/g, \"/\"); \r\n        options.startDate = options.startDate.replace(/T/g , ' ');\r\n        options.startDate = options.startDate.substr(0 , 19);\r\n    }\r\n    if(options.endDate && typeof options.endDate == 'string'){\r\n        options.endDate = options.endDate.replace(/-/g, \"/\"); \r\n        options.endDate = options.endDate.replace(/T/g , ' ');\r\n        options.endDate = options.endDate.substr(0 , 19);\r\n    }\r\n    try {\r\n        options.startDate = new Date(options.startDate);\r\n        options.endDate = new Date(options.endDate);\r\n    }catch (error) {\r\n        throw new Error('时间格式错误');\r\n    }\r\n    let timeDiff = options.startDate.getTime() - options.endDate.getTime();\r\n    let sendData = {\r\n        allday : 0 , //所有差天数\r\n        day : 0 , //天数\r\n        hours : 0 , //小时\r\n        allHours : 0 , //所有小时\r\n        minutes : 0 , //分钟\r\n        allMinutes : 0 , //所有分钟\r\n        seconds : 0 , //秒\r\n        allSeconds : 0 , //所有秒\r\n        timeDiff : timeDiff,\r\n    }\r\n    sendData.allday = Number((timeDiff / (24 * 3600 * 1000)).toFixed(3));\r\n    sendData.day = Math.floor(timeDiff / (24 * 3600 * 1000));\r\n    sendData.hours = Math.floor(timeDiff % (24 * 3600 * 1000) / (3600 * 1000));\r\n    sendData.allHours = Number(Math.floor(timeDiff / (3600 * 1000)).toFixed(3));\r\n    sendData.minutes = Math.floor(timeDiff % (3600 * 1000) / (60 * 1000));\r\n    sendData.allMinutes = Number(Math.floor(timeDiff / (60 * 1000)).toFixed(3));\r\n    sendData.seconds = Math.floor(timeDiff % (60 * 1000) / 1000);\r\n    sendData.allSeconds = Number(Math.floor(timeDiff / 1000).toFixed(3));\r\n    callback(sendData);\r\n    return sendData;\r\n}\r\n\r\n/**前n天(小时/周)后n天(小时/周) 前用负数 后用正数*/\r\nfunction _last(options , callback){\r\n    if(typeof options !== 'object')throw new Error('options must be an object');\r\n    if(!options.date)options.date = new Date();\r\n    if(!options.num)options.num = 1;\r\n    if(!options.type)options.type = 'day';\r\n    if(options.date && typeof options.date == 'string'){\r\n        options.date = options.date.replace(/-/g, \"/\"); \r\n        options.date = options.date.replace(/T/g , ' ');\r\n        options.date = options.date.substr(0 , 19);\r\n    }\r\n    try {\r\n        options.date = new Date(options.date);\r\n    }catch (error) {\r\n        throw new Error('时间格式错误');\r\n    }\r\n    let sendData = {\r\n        previousDate : \"\" ,\r\n        nextDate : \"\",\r\n        nowDate : \"\" ,\r\n        dateInfo : {}\r\n    }\r\n    let nextDate = null;\r\n    if(options.type == 'day'){\r\n        nextDate = new Date(options.date.setDate(options.date.getDate() + options.num));\r\n        if(!options.format) options.format = 'yyyy-MM-dd';\r\n        if(options.num < 0){\r\n            sendData.previousDate = _formatTime(nextDate , options.format)\r\n        }else{\r\n            sendData.nextDate = _formatTime(nextDate , options.format)\r\n        }\r\n        sendData.nowDate = _formatTime(options.date , options.format)\r\n    }\r\n    if(options.type == 'hour'){\r\n        nextDate = new Date(options.date.setHours(options.date.getHours() + options.num));\r\n        if(!options.format) options.format = 'yyyy-MM-dd HH:mm';\r\n        if(options.num < 0){\r\n            sendData.previousDate = _formatTime(nextDate , options.format)\r\n        }else{\r\n            sendData.nextDate = _formatTime(nextDate , options.format)\r\n        }\r\n        sendData.nowDate = _formatTime(options.date , options.format)\r\n    }\r\n    if(options.type == 'week'){\r\n        nextDate = new Date(options.date.setDate(options.date.getDate() + options.num * 7));\r\n        if(!options.format) options.format = 'yyyy-MM-dd';\r\n        if(options.num < 0){\r\n            sendData.previousDate = _formatTime(nextDate , options.format)\r\n        }else{\r\n            sendData.nextDate = _formatTime(nextDate , options.format)\r\n        }\r\n        sendData.nowDate = _formatTime(options.date , options.format)\r\n    }\r\n    sendData.dateInfo = _getNowDate(sendData.date)\r\n    callback(sendData);\r\n    return sendData;\r\n} \r\n\r\n/**获取日期是星期几*/\r\nfunction _week(date , callback){\r\n    const weekList = ['日','一','二','三','四','五','六'];\r\n    if(typeof date == 'function'){\r\n        callback = date;\r\n        date = null;\r\n    }\r\n    if(date && typeof date == 'string'){\r\n        date = date.replace(/-/g, \"/\");\r\n        date = date.replace(/T/g , ' ');\r\n        date = date.substr(0 , 19);\r\n    }\r\n    if(!date)date = new Date();\r\n    try {\r\n        date = new Date(date);\r\n    }catch (error) {\r\n        throw new Error('时间格式错误');\r\n    }\r\n    let week = date.getDay();\r\n    let sendData = {\r\n        format : _formatTime(date , 'yyyy-MM-dd') ,\r\n        date : date,\r\n        dateInfo : _getNowDate(date),\r\n        week : weekList[week]\r\n    }\r\n    callback(sendData);\r\n    return weekList[week];\r\n} \r\n\r\n/**\r\n * 指定日期是当前(年、月、周)的多少天\r\n * */ \r\nfunction _day(options , callback){\r\n    if(typeof options !== 'object')throw new Error('options must be an object');\r\n    if(!options.date)options.date = new Date();\r\n    if(!options.type)options.type = 'year';\r\n    if(options.date && typeof options.date == 'string'){\r\n        options.date = options.date.replace(/-/g, \"/\"); \r\n        options.date = options.date.replace(/T/g , ' ');\r\n        options.date = options.date.substr(0 , 19);\r\n    }\r\n    try {\r\n        options.date = new Date(options.date);\r\n    }catch (error) {\r\n        throw new Error('时间格式错误');\r\n    }\r\n    let sendData = {\r\n        format : _formatTime(options.date , 'yyyy-MM-dd') ,\r\n        date : options.date,\r\n        dateInfo:_getNowDate(options.date),\r\n        num : 0\r\n    }\r\n    let start = null;\r\n    let diff = null;\r\n    let oneDay = 0;\r\n    switch(options.type){\r\n        case 'year':\r\n            start = new Date(options.date.getFullYear(), 0, 0);\r\n            diff = options.date - start;\r\n            oneDay = 1000 * 60 * 60 * 24;\r\n            sendData.num = Math.floor(diff / oneDay);\r\n            break;\r\n        case 'month':\r\n            start = new Date(options.date.getFullYear(), options.date.getMonth(), 0);\r\n            diff = options.date - start;\r\n            oneDay = 1000 * 60 * 60 * 24;\r\n            sendData.num = Math.floor(diff / oneDay);\r\n            break;\r\n        case 'week':\r\n            const week = options.date.getDay();\r\n            sendData.num = week;\r\n            break;\r\n        default:\r\n            throw new Error('type is not defined');\r\n    }\r\n    callback(sendData);\r\n    return sendData.num;\r\n}\r\n\r\n/**\r\n * 指定日期是否为闰年\r\n * */ \r\nfunction _leapYear(date , callback){\r\n    if(!date)date = new Date();\r\n    if(typeof date == 'string'){\r\n        date = date.replace(/-/g, \"/\");\r\n        date = date.replace(/T/g , ' ');\r\n        date = date.substr(0 , 4);\r\n        date = Number(date);\r\n    }\r\n    if(date.length == 4 || typeof date == 'number'){\r\n        date = date + '/01/01';\r\n    }\r\n    try {\r\n        date = new Date(date);\r\n    }catch (error) {\r\n        throw new Error('时间格式错误');\r\n    }\r\n    let year = date.getFullYear();\r\n    let sendData = {\r\n        format : _formatTime(date , 'yyyy-MM-dd') ,\r\n        date : date,\r\n        dateInfo:_getNowDate(date),\r\n        leapYear : false\r\n    }\r\n    if((year % 4 == 0 && year % 100 != 0) || year % 400 == 0){\r\n        sendData.leapYear = true;\r\n    }\r\n    callback(sendData);\r\n    return sendData.leapYear;\r\n}\r\n\r\n/**\r\n * @name 时间处理 只支持链式调用 \r\n * @description 所有参数不传时 默认为当前时间\r\n * @description format 格式化时间\r\n * @description diff 对比时间差\r\n * @description last 前一天后一天\r\n * @description week 获取指定日期是星期几 \r\n * @description day 指定日期是当前(年、月、周)的多少天\r\n * @description leapYear 今年是否是闰年\r\n * */\r\nexport const setTime = new Time();\r\n\r\n/**\r\n * 挂载到Vue原型上\r\n * */ \r\nconst install = function (Vue) {\r\n    Vue.prototype.$formatTime = formatTime;\r\n    Vue.prototype.$asyncFormatTime = asyncFormatTime;\r\n    Vue.prototype.$chainFormatTime = chainFormatTime;\r\n    Vue.prototype.$setTime = setTime;\r\n}\r\n\r\n/**\r\n * 支持CommonJs规范\r\n * */ \r\nif (typeof module === 'object' && module.exports) {\r\n    module.exports = {\r\n        formatTime ,\r\n        asyncFormatTime,\r\n        chainFormatTime,\r\n        install,\r\n        setTime\r\n    };\r\n}\r\n\r\nexport default {\r\n    formatTime ,\r\n    asyncFormatTime,\r\n    chainFormatTime,\r\n    install,\r\n    setTime\r\n}","module.exports = function(originalModule) {\n\tif (!originalModule.webpackPolyfill) {\n\t\tvar module = Object.create(originalModule);\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"exports\", {\n\t\t\tenumerable: true\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","\r\nexport const tableData = [\r\n    {\r\n        key : \"option\",\r\n        type : \"param\",\r\n        parameterType : \"Object | Date | string | number\",\r\n        desc : \"配置对象 | 需要转换的时间\",\r\n        remark : \"\",\r\n        children : [\r\n            {\r\n                key : \"time\",\r\n                type : \"param\",\r\n                parameterType : \"Date | string | number\",\r\n                desc : \"需要转换的时间\",\r\n                remark : \"\"\r\n            },\r\n            {\r\n                key : \"success\",\r\n                type : \"param\",\r\n                parameterType : \"Function\",\r\n                desc : \"成功返回\",\r\n                remark : \"\"\r\n            },\r\n            {\r\n                key : \"fail\",\r\n                type : \"param\",\r\n                parameterType : \"Function\",\r\n                desc : \"失败返回\",\r\n                remark : \"\"\r\n            },\r\n        ]\r\n    },\r\n]\r\n\r\n\r\nexport const returnTableData = [\r\n    {\r\n        key : \"gregorianYear\",\r\n        type : \"return\",\r\n        parameterType : \"String\",\r\n        desc : \"公历年\",\r\n        remark : \"\"\r\n    },\r\n    {\r\n        key : \"gregorianMonth\",\r\n        type : \"return\",\r\n        parameterType : \"String\",\r\n        desc : \"公历月\",\r\n        remark : \"\"\r\n    },\r\n    {\r\n        key : \"gregorianDay\",\r\n        type : \"return\",\r\n        parameterType : \"String\",\r\n        desc : \"公历日\",\r\n        remark : \"\"\r\n    },\r\n    {\r\n        key : \"weekday\",\r\n        type : \"return\",\r\n        parameterType : \"String\",\r\n        desc : \"星期\",\r\n        remark : \"\"\r\n    },\r\n    {\r\n        key : \"hours\",\r\n        type : \"return\",\r\n        parameterType : \"String\",\r\n        desc : \"时\",\r\n        remark : \"\"\r\n    },\r\n    {\r\n        key : \"minutes\",\r\n        type : \"return\",\r\n        parameterType : \"String\",\r\n        desc : \"分\",\r\n        remark : \"\"\r\n    },\r\n    {\r\n        key : \"seconds\",\r\n        type : \"return\",\r\n        parameterType : \"String\",\r\n        desc : \"秒\",\r\n        remark : \"\"\r\n    },\r\n    {\r\n        key : \"lunarYear\",\r\n        type : \"return\",\r\n        parameterType : \"String\",\r\n        desc : \"农历年\",\r\n        remark : \"\"\r\n    },\r\n    {\r\n        key : \"lunarMonth\",\r\n        type : \"return\",\r\n        parameterType : \"String\",\r\n        desc : \"农历月\",\r\n        remark : \"\"\r\n    },\r\n    {\r\n        key : \"lunarDay\",\r\n        type : \"return\",\r\n        parameterType : \"String\",\r\n        desc : \"农历日\",\r\n        remark : \"\"\r\n    },\r\n    {\r\n        key : \"lunarYearCn\",\r\n        type : \"return\",\r\n        parameterType : \"String\",\r\n        desc : \"农历天干地支纪年\",\r\n        remark : \"\"\r\n    },\r\n    {\r\n        key : \"lunarMonthCn\",\r\n        type : \"return\",\r\n        parameterType : \"String\",\r\n        desc : \"农历中文月\",\r\n        remark : \"\"\r\n    },\r\n    {\r\n        key : \"lunarDayCn\",\r\n        type : \"return\",\r\n        parameterType : \"String\",\r\n        desc : \"农历中文日\",\r\n        remark : \"\"\r\n    },\r\n    {\r\n        key : \"zodiacYear\",\r\n        type : \"return\",\r\n        parameterType : \"String\",\r\n        desc : \"农历生肖年\",\r\n        remark : \"\"\r\n    },\r\n    {\r\n        key : \"solarTerm\",\r\n        type : \"return\",\r\n        parameterType : \"String\",\r\n        desc : \"节气\",\r\n        remark : \"\"\r\n    },\r\n    {\r\n        key : \"gregorianFestival\",\r\n        type : \"return\",\r\n        parameterType : \"String\",\r\n        desc : \"公立节日\",\r\n        remark : \"\"\r\n    },\r\n    {\r\n        key : \"lunarFestival\",\r\n        type : \"return\",\r\n        parameterType : \"String\",\r\n        desc : \"农历节日\",\r\n        remark : \"\"\r\n    },\r\n]","export const code1 = `\r\nimport getCalendar from \"@/tool/calender\";\r\n\r\n// 调用方式一\r\nconst calendar = getCalendar(new Date());\r\n\r\n// 调用方式二\r\ngetCalendar({\r\n    time : new Date(),\r\n    success : (data) => {\r\n        console.log(data);\r\n    }\r\n});\r\n`\r\n\r\n"],"sourceRoot":""}