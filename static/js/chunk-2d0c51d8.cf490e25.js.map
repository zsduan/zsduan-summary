{"version":3,"sources":["webpack:///./src/views/setTime/config.js"],"names":["code1","code2","code3","code4","code5","code6"],"mappings":"kHAAA,2OAQO,MAAMA,EAAS,qrDAoETC,EAAS,qjBAiBTC,EAAS,2dAkBTC,EAAS,qPAWTC,EAAS,4ZAgBTC,EAAS","file":"static/js/chunk-2d0c51d8.cf490e25.js","sourcesContent":["/*\r\n * @Author: zs.duan\r\n * @Date: 2022-09-30 17:10:34\r\n * @LastEditors: zs.duan\r\n * @LastEditTime: 2022-09-30 17:18:51\r\n * @FilePath: \\vue2+js+eui+template\\src\\views\\setTime\\config.js\r\n */\r\n\r\nexport const code1 = `\r\n// 共有两个方法 formatTime 和 asyncFormatTime 其中 asyncFormatTime 返回一个Promise对象\r\nimport {formatTime , asyncFormatTime , chainFormatTime} from \"../../utils/format-time\";\r\n\r\n\r\n/**\r\n * @name 格式化时间 \r\n * @description options 建议使用对象传参 也可以使用字符串 | 时间戳 | 日期对象\r\n * @description 所有参数不传时 默认为当前时间\r\n * @param {Object | string | Date | number} [options] 配置对象 | 日期字符串 | 日期对象 | 时间戳\r\n * @param {String} options.format 格式化字符串 yyyy-MM-dd HH:mm:ss\r\n * @param {Date | string | number} [options.date] 日期对象 | 日期字符串 | 时间戳\r\n * @param {Function} [options.success] 成功返回\r\n * @param {Function} [options.fail] 失败返回\r\n * @param {Function} [options.complete] 完成返回\r\n * @returns {String} 格式化后的时间\r\n * */\r\n\r\n// 方式一\r\nformatTime({\r\n    date : new Date(),\r\n    format : \"yyyy-MM-dd HH:mm:ss\",\r\n    success : (res)=>{\r\n        this.time2 = res\r\n    },\r\n    fail : (err)=>{\r\n        console.log(err)\r\n    },\r\n})\r\n\r\n// 方式二\r\nlet time = formatTime({\r\n    date : new Date(),\r\n    format : \"yyyy-MM-dd\",\r\n});\r\n\r\n// 方式三\r\nformatTime(new Date())\r\n\r\n// 方式四 Promise\r\nasyncFormatTime({\r\n    date : new Date(),\r\n    format : \"yyyy-MM-dd HH:mm:ss\",\r\n}).then((res)=>{\r\n    this.time3 = res\r\n}).catch((err)=>{\r\n    console.log(err)\r\n})\r\n\r\n// 方式五 链式调用\r\nchainFormatTime(new Date()).format(\"yyyy-MM-dd HH:mm:ss\").time;\r\n\r\n// 方式六 统一调用 不支持Promise 但是支持回调\r\nimport {setTime} from \"../../utils/format-time\";\r\n/**\r\n* 格式化时间\r\n* @param {Object | string | number | Date | Function} [options] 配置参数/回调函数 可以是对象 字符串 时间戳 时间对象\r\n* @param {string | number | Date} [options.date] 时间\r\n* @param {string} [options.format] 格式化方式 yyyy-MM-dd HH:mm:ss\r\n* @param {Function} [callback] 回调函数\r\n* @returns {string} 格式化后的时间\r\n* */ \r\nsetTime.format({\r\n    date : new Date(),\r\n    format : \"yyyy-MM-dd HH:mm:ss\"\r\n})\r\n`\r\n\r\nexport const code2 = `\r\nimport {setTime} from \"../../utils/format-time\";\r\n/**\r\n* 对比时间差\r\n* @param {Object} options 配置参数\r\n* @param {Date | string | number} options.startDate 开始时间\r\n* @param {Date | string | number} [options.endDate] 结束时间 不传默认为当前时间\r\n* @param {Function} [callback] 回调函数\r\n* @returns {Object} 对比后的时间差\r\n* @description 返回的数据格式 {allday : 0 , day : 0 , hours : 0 , allHours : 0 , minutes : 0 , allMinutes : 0 , seconds : 0 , allSeconds : 0 , timeDiff : 0}\r\n* */ \r\nthis.diffTime = setTime.diff({\r\n    startDate : \"2024-01-01 12:00:00\",\r\n    endDate : \"2023-01-01 18:00:00\",\r\n})\r\n`\r\n\r\nexport const code3 = `\r\nimport {setTime} from \"../../utils/format-time\";\r\n/**\r\n* 前n天(小时/周)后n天(小时/周) 前用负数 后用正数\r\n* @param {Object | Function} [options] 配置参数/回调函数\r\n* @param {Date | string | number} [options.date] 时间 默认为当前时间\r\n* @param {number} [options.num] 需要前后多少天(小时/周) 默认1\r\n* @param {string} [options.type] 类型 day hour week 默认 day\r\n* @param {Function} [callback] 回调函数\r\n* @returns {Object} 时间信息\r\n* */ \r\nthis.lastTime = setTime.last({\r\n    date : new Date(),\r\n    num : 2 ,\r\n    type : \"day\"\r\n})\r\n`\r\n\r\nexport const code4 = `\r\nimport {setTime} from \"../../utils/format-time\";\r\n/**\r\n* 获取当前日期是星期几\r\n* @param {Date | string | number | Function} [date] 时间/直接为回调函数 默认为当前时间 \r\n* @param {Function} [callback] 回调函数\r\n* @return {String} 返回星期几\r\n* */ \r\nthis.week = setTime.week()\r\n`\r\n\r\nexport const code5 = `\r\nimport {setTime} from \"../../utils/format-time\";\r\n/**\r\n* 指定日期是当前(年、月、周)的多少天\r\n* @param {Object | Function} [options] 配置参数/回调函数\r\n* @param {Date | string | number} [options.date] 时间 默认为当前时间\r\n* @param {string} [options.type] 类型 year month week 默认 year\r\n* @param {Function} [callback] 回调函数\r\n* @returns {Number} 返回指定日期是当前(年、月、周)的多少天\r\n* */ \r\nthis.day= setTime.day({\r\n    date : new Date(),\r\n    type : \"year\"\r\n})\r\n`\r\n\r\nexport const code6 = `\r\nimport {setTime} from \"../../utils/format-time\";\r\n/**\r\n* 是否为闰年\r\n* @param {Date | string | number | Function} [date] 时间/直接为回调函数 默认为当前时间\r\n* @param {Function} [callback] 回调函数\r\n* @returns {Boolean} 返回是否为闰年\r\n* */ \r\nthis.leapYear =setTime.leapYear(new Date())\r\n`"],"sourceRoot":""}